{"version":3,"sources":["components/Images/731.gif","components/Images/SBBLogo.png","config.js","services/token-service.js","context/user-context.js","components/Header/Header.js","components/LandingPage/LandingPage.js","services/auth-api-service.js","services/deck-api-service.js","components/LoginPage/LoginPage.js","components/RegisterPage/RegisterPage.js","services/mtgcard-api-service.js","services/Single-deck-api-service.js","components/CardResults/CardResults.js","components/SearchCards/SearchParamsData.js","components/SearchCards/SearchCards.js","components/AllDecks/AllDecks.js","components/SingleDeckView/SingleDeckView.js","context/user-provider.js","App.js","index.js"],"names":["module","exports","API_SCRYFALL","API_ENDPOINT","TOKEN_KEY","USER_ID","DECKS","TokenService","saveAuthToken","token","id","window","sessionStorage","setItem","config","getAuthToken","getItem","clearAuthToken","removeItem","hasAuthToken","makeBasicAuthToken","userName","password","btoa","UserContext","React","createContext","Header","handleLogoutClick","context","clearId","className","to","onClick","this","src","logo","alt","user_id","renderLogoutLink","renderLoginLink","Component","contextType","LandingPage","AuthApiService","postLogin","credentials","fetch","method","headers","body","JSON","stringify","then","res","ok","json","e","Promise","reject","postUser","user","DeckApiService","getDecks","postDeck","deckname","deck_name","deleteDeck","deck_id","LoginPage","props","handleLoginSuccess","location","history","destination","state","from","push","handleSubmitJwtAuth","ev","preventDefault","setState","error","thinking","target","username","value","authToken","payload","handleSetUserInfo","catch","decks","updateDecks","contextSet","onSubmit","role","required","type","name","defaultProps","RegisterPage","registerthinking","handleRegistrationSuccess","handleSubmitNewUser","MTGCardSearchService","getSearchResults","parameters","mode","handlers","Error","status","console","log","getNextPageResults","uri","getRulings","getNameSearchResults","SingleDeckApiService","getDeckList","deckId","postNewCard","card_name","image_url","multiverseid","deleteCard","card_id","CardResults","closeUp","imageModalView","removeImageCloseUp","removeRulingsCloseUp","rulingsModalView","revealConfirmation","card","thisDeck","find","deck","Number","added","addedCard","addedToDeck","addCardToDeck","event","image","layout","card_faces","image_uris","border_crop","normal","multiverse_ids","selectedDeck","type_line","handleDeckChange","buttonAbility","rulings","data","length","warnings","rulingsUri","rulings_uri","foundRulings","map","rulingObj","published_at","comment","getCardRulings","form","onChange","key","disabled","legalities","standard","pioneer","modern","legacy","vintage","brawl","closeUpGenerator","supertypes","types","landTypes","enchantmentTypes","artifactTypes","rarity","instSorcTypes","loyaltyTypes","powTou","SearchCards","executeScroll","scrollTo","top","behavior","scrollUp","handleSubmit","searched","cards","FormData","string","get","nameString","replace","sendNameFetch","i","concat","collectColors","getAll","c","text","t","selectedSet","setOptions","set","code","nextPage","sendFetch","searchMore","has_more","next_page","cardArr","expandCollapse","expanded","visible","exp_col","handleAddText","document","getElementById","clearTextState","keyPressed","index","currentText","newTextArr","slice","bind","validType","Creature","Planeswalker","currentComponent","a","async","creatTypes","planeswTypes","setOpt","filteredSetOptions","filter","set_type","fetchDropdowns","checked","getElementsByName","cardResults","showNewDropdown","defaultValue","hidden","htmlFor","placeholder","defaultChecked","uncheckColorless","uncheckColors","min","max","paramOptions","typeArray","additionalTypesDropdown","onKeyPress","list","renderThinking","moreButon","AllDecks","lessDecks","d","clearDeckName","newDeckName","setNewDecks","addDeck","addNewDeck","renderDecks","SingleDeckView","sortByType","currentType","countType","listCardView","listview","deckList","deckName","Sorcery","Instant","Enchantment","Land","Artifact","currenttype","obj","typeFilteredList","search","consolidated","forEach","j","findIndex","count","Object","create","match","params","lessCards","cardlist","total","totalCards","UserProvider","parse","stringDecks","moreDecks","Provider","children","App","exact","path","component","ReactDOM","render"],"mappings":"8HAAAA,EAAOC,QAAU,IAA0B,iC,uBCA3CD,EAAOC,QAAU,IAA0B,qC,mUCA5B,GACbC,aAAc,4BACdC,aAAc,8CACdC,UAAW,aACXC,QAAS,UACTC,MAAO,SCHHC,EAAe,CACnBC,cADmB,SACLC,EAAOC,GACnBC,OAAOC,eAAeC,QAAQC,EAAOV,UAAWK,GAChDE,OAAOC,eAAeC,QAAQC,EAAOT,QAASK,IAGhDK,aANmB,WAOjB,OAAOJ,OAAOC,eAAeI,QAAQF,EAAOV,YAG9Ca,eAVmB,WAWjBN,OAAOC,eAAeM,WAAWJ,EAAOV,WACxCO,OAAOC,eAAeM,WAAWJ,EAAOT,SACxCM,OAAOC,eAAeM,WAAWJ,EAAOR,QAG1Ca,aAhBmB,WAiBjB,QAASZ,EAAaQ,gBAGxBK,mBApBmB,SAoBAC,EAAUC,GAC3B,OAAOX,OAAOY,KAAP,UAAeF,EAAf,YAA2BC,MAIvBf,ICtBAiB,EAHKC,IAAMC,gB,yBCKLC,E,2MAGnBC,kBAAoB,WAClBrB,EAAaU,iBACb,EAAKY,QAAQC,W,kFAIb,OACE,yBAAKC,UAAU,kBACb,kBAAC,IAAD,CACEA,UAAU,UACVC,GAAG,YAFL,YAKA,kBAAC,IAAD,CACED,UAAU,UACVC,GAAG,gBAFL,UAKA,kBAAC,IAAD,CACED,UAAU,UACVC,GAAG,IACHC,QAASC,KAAKN,mBAHhB,a,wCAWJ,OACE,yBAAKG,UAAU,kBACb,kBAAC,IAAD,CACEA,UAAU,UACVC,GAAG,cAFL,SAKA,kBAAC,IAAD,CACED,UAAU,UACVC,GAAG,iBAFL,e,+BAUJ,OAAO,oCACL,yBAAKD,UAAU,UACb,kBAAC,IAAD,CACEA,UAAU,eACVC,GAAG,KACD,yBAAKD,UAAU,SAASI,IAAKC,IAAMC,IAAI,aAE3C,yBAAKN,UAAU,gBACZG,KAAKL,QAAQS,QAAQJ,KAAKK,mBAAoBL,KAAKM,yB,GAzD1BC,aAAfd,EACZe,YAAclB,E,YCLFmB,G,uLAEb,OACI,6BACI,oIACA,oEACA,2GACA,uEACA,+EACA,mDACA,wD,GAVyBF,c,iBC+B1BG,EAhCQ,CACrBC,UADqB,SACXC,GACR,OAAOC,MAAM,GAAD,OAAIjC,EAAOX,aAAX,eAAsC,CAChD6C,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUN,KAEpBO,MAAK,SAAAC,GAAG,OACLA,EAAIC,GAEFD,EAAIE,OADJF,EAAIE,OAAOH,MAAK,SAAAI,GAAC,OAAIC,QAAQC,OAAOF,UAK9CG,SAhBqB,SAgBZC,GACP,OAAOd,MAAM,GAAD,OAAIjC,EAAOX,aAAX,UAAiC,CAC3C6C,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUS,KAEtBR,MAAK,SAAAC,GAAG,OACLA,EAAIC,GAELD,EAAIE,OADHF,EAAIE,OAAOH,MAAK,SAAAI,GAAC,OAAIC,QAAQC,OAAOF,WC4B7BK,G,MArDQ,CACrBC,SADqB,WAEnB,OAAOhB,MAAM,GAAD,OAAIjC,EAAOX,aAAX,UAAiC,CAC3C6C,OAAQ,MACRC,QAAS,CACL,cAAgB,UAAhB,OAA2B1C,EAAaQ,mBAG3CsC,MAAK,SAAAC,GAAG,OACLA,EAAIC,GAEFD,EAAIE,OADJF,EAAIE,OAAOH,MAAK,SAAAI,GAAC,OAAIC,QAAQC,OAAOF,UAK9CO,SAfqB,SAeZ1B,EAAS2B,GAChB,OAAOlB,MAAM,GAAD,OAAIjC,EAAOX,aAAX,UAAiC,CAC3C6C,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,cAAgB,UAAhB,OAA2B1C,EAAaQ,iBAE1CmC,KAAMC,KAAKC,UAAU,CACnBd,QAASA,EACT4B,UAAWD,MAGZZ,MAAK,SAAAC,GAAG,OACLA,EAAIC,GAEFD,EAAIE,OADJF,EAAIE,OAAOH,MAAK,SAAAI,GAAC,OAAIC,QAAQC,OAAOF,UAK9CU,WAlCqB,SAkCVC,GACT,OAAOrB,MAAM,GAAD,OAAIjC,EAAOX,aAAX,UAAiC,CAC3C6C,OAAQ,SACRC,QAAS,CACP,eAAgB,mBAChB,cAAgB,UAAhB,OAA2B1C,EAAaQ,iBAE1CmC,KAAMC,KAAKC,UAAU,CACnBgB,QAASA,MAGVf,MAAK,SAAAC,GAAG,OACLA,EAAIC,GAEFD,EAAIE,OADJF,EAAIE,OAAOH,MAAK,SAAAI,GAAC,OAAIC,QAAQC,OAAOF,Y,iBC1C3BY,E,YAGnB,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAqBRC,mBAAqB,WAAO,IAAD,EACK,EAAKD,MAA3BE,EADiB,EACjBA,SAAUC,EADO,EACPA,QACZC,GAAeF,EAASG,OAAS,IAAIC,MAAQ,WACnDH,EAAQI,KAAKH,IAzBG,EA4BlBI,oBAAsB,SAAAC,GACpBA,EAAGC,iBACH,EAAKC,SAAS,CACZC,MAAO,KACPC,UAAU,IAJc,MAMIJ,EAAGK,OAAzBC,EANkB,EAMlBA,SAAU/D,EANQ,EAMRA,SAClBsB,EAAeC,UAAU,CACvBwC,SAAUA,EAASC,MACnBhE,SAAUA,EAASgE,QAEpBjC,MAAK,SAAAC,GAEF+B,EAASC,MAAQ,GACjBhE,EAASgE,MAAQ,GACjB/E,EAAaC,cAAc8C,EAAIiC,UAAWjC,EAAIkC,QAAQlD,SACtD,EAAKmD,uBAERC,OAAM,SAAApC,GACL,EAAK2B,SAAS,CAAEC,MAAO5B,EAAI4B,YA7C7B,EAAKP,MAAQ,CACXO,MAAO,KACP5C,QAAS,KACT6C,UAAU,GALI,E,qLAiBErB,EAAeC,Y,cAA7B4B,E,0BACmBzD,KAAKL,QAAQ+D,YAAYD,I,OAA5CE,E,OACJ3D,KAAKqC,mBAAmBsB,G,gFAiCxB,OAAO,oCACL,0BAAMC,SAAW5D,KAAK4C,qBACpB,yBAAKiB,KAAK,SACP7D,KAAKyC,MAAMO,OAAS,uBAAGnD,UAAU,OAAOG,KAAKyC,MAAMO,QAEtD,kCACE,yCACE,8CACA,2BAAOc,UAAQ,EAACC,KAAK,OAAOC,KAAK,aACjC,6BACA,6CACA,2BAAOF,UAAQ,EAACC,KAAK,WAAWC,KAAK,aACrC,6BACA,2BAAOD,KAAK,SAASX,MAAM,YAGjC,6BACCpD,KAAKyC,MAAMQ,SAAU,yBAAKzE,GAAG,WAAWyB,IAAKgD,IAAU9C,IAAI,eAAgB,oC,GAxE3CI,aAAlB4B,EACZ3B,YAAclB,EADF6C,EAYZ8B,aAAe,CAChB3B,SAAU,GACVC,QAAS,CACPI,KAAM,e,UClBKuB,E,2MACnBzB,MAAO,CACLO,MAAM,KACNmB,kBAAkB,G,EASpBC,0BAA4B,SAAAzC,GACN,EAAKS,MAAjBG,QACAI,KAAK,e,EAGf0B,oBAAsB,SAAAxB,GACpBA,EAAGC,iBACH,EAAKC,SAAS,CACZC,MAAO,KACPmB,kBAAkB,IAJM,MAMItB,EAAGK,OAAzBC,EANkB,EAMlBA,SAAU/D,EANQ,EAMRA,SAClBsB,EAAegB,SAAS,CACtByB,SAAUA,EAASC,MACnBhE,SAAUA,EAASgE,QAEpBjC,MAAK,SAAAC,GAEF+B,EAASC,MAAQ,GACjB,EAAKgB,+BAERZ,OAAM,SAAApC,GACL,EAAK2B,SAAS,CAAEC,MAAO5B,EAAI4B,Y,wEAK7B,OACE,6BACE,0BAAMY,SAAU5D,KAAKqE,qBACnB,yBAAKR,KAAK,SACP7D,KAAKyC,MAAMO,OAAS,uBAAGnD,UAAU,OAAOG,KAAKyC,MAAMO,QAEtD,kCACE,qDACE,kDACA,0BAAMnD,UAAU,YAAhB,mBACA,6BACA,2BAAOkE,KAAK,OAAOC,KAAK,aACxB,6BACA,6BACA,6CACA,6BACA,0BAAMnE,UAAU,YAAhB,gFACA,6BACA,2BAAOkE,KAAK,WAAWC,KAAK,aAC5B,6BACChE,KAAKyC,MAAM0B,iBAAiB,yBAAK3F,GAAG,WAAWyB,IAAKgD,IAAU9C,IAAI,eAAiB,4BAAQ4D,KAAK,UAAb,mB,GA3DxDxD,aAArB2D,EAMZD,aAAe,CACpB1B,QAAS,CACPI,KAAM,e,YC2DG2B,G,MAtEc,CACzBC,iBADyB,SACRC,GACb,OAAO3D,MAAMjC,EAAOZ,aAAa,kBAAkBwG,EAAW,CAC1D1D,OAAQ,MACR2D,KAAM,OACNC,SAAU,CACN,eAAe,sBAGtBvD,MAAK,SAAAC,GACF,IAAKA,EAAIC,GACP,MAAM,IAAIsD,MAAMvD,EAAIwD,QAEtB,OAAOxD,EAAIE,UAEdkC,OAAM,SAAAR,GAAK,OAAI6B,QAAQC,IAAI,CAAC9B,cAGjC+B,mBAlByB,SAkBNC,GACf,OAAOnE,MAAMmE,EAAI,CACblE,OAAQ,MACR2D,KAAM,OACNC,SAAU,CACN,eAAe,sBAGtBvD,MAAK,SAAAC,GACF,IAAKA,EAAIC,GACP,MAAM,IAAIsD,MAAMvD,EAAIwD,QAEtB,OAAOxD,EAAIE,UAEdkC,OAAM,SAAAR,GAAK,OAAI6B,QAAQC,IAAI,CAAC9B,cAGjCiC,WAnCyB,SAmCdD,GACP,OAAOnE,MAAMmE,EAAI,CACblE,OAAQ,MACR2D,KAAM,OACNC,SAAU,CACN,eAAe,sBAGtBvD,MAAK,SAAAC,GACF,IAAKA,EAAIC,GACP,MAAM,IAAIsD,MAAMvD,EAAIwD,QAEtB,OAAOxD,EAAIE,UAEdkC,OAAM,SAAAR,GAAK,OAAI6B,QAAQC,IAAI,CAAC9B,cAGjCkC,qBApDyB,SAoDJlB,GACjB,OAAOnD,MAAMjC,EAAOZ,aAAa,qBAAqBgG,EAAK,CACvDlD,OAAO,MACP2D,KAAM,OACNC,SAAU,CACN,eAAgB,sBAGvBvD,MAAK,SAAAC,GACF,IAAKA,EAAIC,GACL,MAAM,IAAIsD,MAAMvD,EAAIwD,QAEtB,OAAOxD,EAAIE,UAEdkC,OAAM,SAAAR,GAAK,OAAI6B,QAAQC,IAAI,CAAC9B,gBCRxBmC,EAzDc,CAC3BC,YAD2B,SACfC,GACV,OAAOxE,MAAM,GAAD,OAAIjC,EAAOX,aAAX,kBAAiCoH,GAAU,CACrDvE,OAAQ,MACRC,QAAS,CACL,cAAgB,UAAhB,OAA2B1C,EAAaQ,mBAG3CsC,MAAK,SAAAC,GAAG,OACLA,EAAIC,GAEFD,EAAIE,OADJF,EAAIE,OAAOH,MAAK,SAAAI,GAAC,OAAIC,QAAQC,OAAOF,UAK9C+D,YAf2B,SAefC,EAAWC,EAAWC,EAAcvD,EAAS6B,GACtD,OAAOlD,MAAM,GAAD,OAAIjC,EAAOX,aAAX,kBAAiCiE,GAAW,CACvDpB,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,cAAgB,UAAhB,OAA2B1C,EAAaQ,iBAE1CmC,KAAMC,KAAKC,UAAU,CACnBqE,YACAC,YACAC,eACAvD,UACA6B,WAGD5C,MAAK,SAAAC,GAAG,OACLA,EAAIC,GAEFD,EAAIE,OADJF,EAAIE,OAAOH,MAAK,SAAAI,GAAC,OAAIC,QAAQC,OAAOF,SAGzCiC,OAAM,SAAApC,GAAG,OAAIyD,QAAQC,IAAI1D,OAG9BsE,WAtC2B,SAsChBC,EAASzD,GAClB,OAAOrB,MAAM,GAAD,OAAIjC,EAAOX,aAAX,kBAAiCiE,GAAW,CACtDpB,OAAQ,SACRC,QAAS,CACP,eAAgB,mBAChB,cAAgB,UAAhB,OAA2B1C,EAAaQ,iBAE1CmC,KAAMC,KAAKC,UAAU,CACnByE,cAGDxE,MAAK,SAAAC,GAAG,OACLA,EAAIC,GAEFD,EAAIE,OADJF,EAAIE,OAAOH,MAAK,SAAAI,GAAC,OAAIC,QAAQC,OAAOF,WChD3BqE,E,YAEjB,WAAYxD,GAAO,IAAD,8BACd,4CAAMA,KA+BVyD,QAAU,WACN,EAAK9C,SAAS,CAAE+C,eAAgB,eAjClB,EAoClBC,mBAAqB,WACjB,EAAKhD,SAAS,CAAE+C,eAAgB,eArClB,EAwClBE,qBAAuB,WACnB,EAAKjD,SAAS,CAAEkD,iBAAkB,eAzCpB,EA4ClBC,mBAAqB,SAACC,GAClB,IAAIC,EAAW,EAAKzG,QAAQ8D,MAAM4C,MAAK,SAAAC,GAAI,OAAIC,OAAOJ,EAAKjE,WAAaoE,EAAKpE,WAC7E,EAAKa,SAAS,CACVyD,OAAO,EACPC,UAAWN,EAAKZ,UAChBmB,YAAaN,EAASpE,aAjDZ,EAqDlB2E,cAAc,SAACC,GAGX,IAAIC,EAFJD,EAAM9D,iBAIF+D,EADqB,cAAtB,EAAKzE,MAAM0E,OACF,EAAK1E,MAAM2E,WAAW,GAAGC,WAAWC,YAAc,KAAO,EAAK7E,MAAM2E,WAAW,GAAGC,WAAWC,YAE7F,EAAK7E,MAAM4E,WAAWE,OAGlCrC,QAAQC,IAAI+B,GAER1B,EAAqBG,YACjB,EAAKlD,MAAM4B,KACX6C,EACA,EAAKzE,MAAM+E,eAAe,GAC1B,EAAK1E,MAAM2E,aACX,EAAKhF,MAAMiF,WAEdlG,MAAK,SAAAC,GAAG,OAAG,EAAK8E,mBAAmB9E,OAxE1B,EA4ElBkG,iBAAiB,SAACV,GACdA,EAAM9D,iBACN,EAAKC,SAAS,CACVqE,aAAcR,EAAM1D,OAAOE,MAC3BmE,eAAe,KA9EnB,EAAK9E,MAAQ,CACTqD,eAAgB,YAChBG,iBAAkB,YAClBmB,aAAc,EACdG,eAAe,EACfC,QAAS,GACThB,OAAO,EACPC,UAAW,GACXC,YAAa,IAVH,E,4EAcH1B,GAAM,IAAD,OAChBV,EAAqBW,WAAWD,GAC/B7D,MAAK,SAAAC,GACCA,EAAIqG,KAAKC,OAAS,EACjB,EAAK3E,SAAS,CACVkD,iBAAkB,YAClBuB,QAASpG,EAAIqG,OAGjB,EAAK1E,SAAS,CACVkD,iBAAkB,YAClBuB,QAAS,QAIpBhE,OAAM,SAAApC,GAAG,OAAIyD,QAAQC,IAAI1D,EAAIuG,e,+BAuDzB,IAAD,OAoBJ,IAnBexB,EAmBTyB,EAAa5H,KAAKoC,MAAMyF,YAE1BC,EAAc,uBAAGjI,UAAU,WAAb,oDAOtB,OANOG,KAAKyC,MAAM+E,QAAQE,OAAS,IAC3BI,EAAe9H,KAAKyC,MAAM+E,QAAQO,KAAI,SAAAC,GAClC,OAAO,uBAAGnI,UAAU,WAAWmI,EAAUC,aAAlC,KAAkDD,EAAUE,aAK3E,yBAAKrI,UAAU,QACX,uBAAGA,UAAU,YAAYG,KAAKoC,MAAM4B,MACpC,yBAAKnE,UAAU,cACf,yBAAKA,UAAU,YAAYM,IAAKH,KAAKoC,MAAM4B,KAAM/D,KAhCtCkG,EAgCiDnG,KAAKoC,MA/B9C,cAAhB+D,EAAKW,OACGX,EAAKY,WAAW,GAAGC,WAAWC,YAE9Bd,EAAKa,WAAWC,aA4B8ClH,QAASC,KAAK6F,UAAU,6BACjG,4BAAQhG,UAAU,aAAaE,QAAS,kBAAM,EAAKoI,eAAeP,KAAlE,WACA,0BAAMpJ,GAAIwB,KAAKoC,MAAM5D,GAAIoF,SAAU5D,KAAK2G,eACpC,4BAAQ9G,UAAU,iBAAiBmE,KAAK,WAAWxF,GAAG,WAAW4J,KAAK,WAAWhF,MAAOpD,KAAKyC,MAAM2E,aAAciB,SAAUrI,KAAKsH,kBAC5H,4BAAQlE,MAAM,QAAd,eACCpD,KAAKL,QAAQ8D,MAAMsE,KAAI,SAAAzB,GAAI,OACxB,4BAAQvC,KAAK,SAASC,KAAK,OAAOsE,IAAKhC,EAAKpE,QAASkB,MAAOkD,EAAKpE,SAAUoE,EAAKtE,eAGxF,6BACA,2BAAOnC,UAAU,6BAA6BkE,KAAK,SAASX,MAAM,cAAcmF,SAAUvI,KAAKyC,MAAM8E,kBAG7G,yBAAK1H,UAAU,qBACVG,KAAKyC,MAAM+D,MAAO,uCAAaxG,KAAKyC,MAAMgE,UAAxB,OAAuCzG,KAAKyC,MAAMiE,aAAqB,gCAE9F,yBAAKlI,GAAG,eAAcqB,UAAWG,KAAKyC,MAAMwD,kBACxC,0BAAMpG,UAAU,QAAQE,QAASC,KAAKgG,sBAAtC,UACC8B,EACD,yBAAKtJ,GAAG,aAAaqB,UAAU,WAC3B,wCAAcG,KAAKoC,MAAMoG,WAAWC,UACpC,uCAAazI,KAAKoC,MAAMoG,WAAWE,SACnC,sCAAY1I,KAAKoC,MAAMoG,WAAWG,QAClC,sCAAY3I,KAAKoC,MAAMoG,WAAWI,QAClC,uCAAa5I,KAAKoC,MAAMoG,WAAWK,SACnC,qCAAW7I,KAAKoC,MAAMoG,WAAWM,SAGzC,yBAAKtK,GAAG,aAAaqB,UAAWG,KAAKyC,MAAMqD,gBACvC,0BAAMjG,UAAU,QAAQE,QAASC,KAAK+F,oBAAtC,UArDJ,SAA2BI,GACvB,MAAmB,cAAhBA,EAAKW,OACA,6BACJ,yBAAKjH,UAAU,gBAAgBM,IAAKgG,EAAKnC,KAAM/D,IAAKkG,EAAKY,WAAW,GAAGC,WAAWC,cAClF,yBAAKpH,UAAU,gBAAgBM,IAAKgG,EAAKnC,KAAM/D,IAAKkG,EAAKY,WAAW,GAAGC,WAAWC,eAG3E,yBAAKpH,UAAU,gBAAgBM,IAAKgG,EAAKnC,KAAM/D,IAAKkG,EAAKa,WAAWC,cA+C9E8B,CAAiB/I,KAAKoC,a,GArJM7B,aAApBqF,EACVpF,YAAclB,ECNzB,IAiHe,GACX0J,WAlHe,CACf,QACA,OACA,YACA,OACA,SA8GAC,MA3GS,CACT,WACA,aACA,WACA,cACA,OACA,UACA,OACA,aACA,QACA,eACA,SACA,UACA,SACA,SACA,YA6FAC,UA1Fc,CACd,SACA,SACA,OACA,SACA,OACA,QACA,OACA,WACA,SACA,cACA,QACA,QACA,eA8EAC,iBA3EqB,CACrB,OACA,YACA,QACA,OACA,UAuEAC,cApEiB,CACjB,OACA,cACA,YACA,OACA,gBACA,WACA,WA8DAC,OA3DW,CACX,SACH,WACA,OACA,UAwDGC,cArDiB,CACjB,YACA,SACA,QAmDAC,aAhDiB,CACjB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MAwCAC,OArCW,CACX,KACA,IACA,IACA,KACA,IACA,MACA,IACA,MACA,IACA,MACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,OCrGiBC,G,kBAEjB,WAAYrH,GAAO,IAAD,8BACd,4CAAMA,KAqBVsH,cAAe,WACX7E,QAAQC,IAAI,aACZrG,OAAOkL,SAAS,CACZC,IAAK,IACLC,SAAU,YA1BA,EA8BlBC,SAAU,WACNrL,OAAOkL,SAAS,CACZC,IAAK,EACLC,SAAU,UAjCA,EAqClBE,aAAa,SAACnD,GACV,EAAK8C,gBACL9C,EAAM9D,iBACN,EAAKC,SAAS,CACVE,UAAU,EACV+G,UAAU,EACVC,MAAO,KAEX,IAAMxC,EAAO,IAAIyC,SAAStD,EAAM1D,QAC5BiH,EAAQ,GAKZ,GAAG1C,EAAK2C,IAAI,QAAQ,CAChB,IACIC,EAAa5C,EAAK2C,IAAI,QAAQE,QADrB,MACoC,KACjD,EAAKC,cAAcF,OAChB,CARW,CACd,QAAS,aAAc,aAAc,kBAQzBtC,KAAI,SAAAyC,GAIZ,OAHG/C,EAAK2C,IAAII,KACRL,EAASA,EAAOM,OAAOhD,EAAK2C,IAAII,KAE7BL,KAcX,GAXqB,CAAC,QAAS,YAAa,aAAc,UAAW,SAAU,OAEhEpC,KAAI,SAAAyC,GACf,MAAmB,YAAhB/C,EAAK2C,IAAII,IAAoC,KAAhB/C,EAAK2C,IAAII,GAC9B,SAEPL,EAASA,EAAOM,OAAOhD,EAAK2C,IAAII,EAAE,YAAc/C,EAAK2C,IAAII,GAAK,QAKnE/C,EAAK2C,IAAI,SAAS,CACjB,IAAIM,EAAc,GAClBjD,EAAKkD,OAAO,SAAS5C,KAAI,SAAA6C,GAAC,OAAIF,EAAgBA,EAAcD,OAAOG,MACnET,EAASA,EAAOM,OAAOhD,EAAK2C,IAAI,iBAAkBM,EAAc,KAQpE,GAL8B,IAA3B,EAAKjI,MAAMoI,KAAKnD,QACf,EAAKjF,MAAMoI,KAAK9C,KAAI,SAAA+C,GAAC,OACjBX,EAASA,EAAOM,OAAO,MAAQK,EAAI,SAGxCrD,EAAK2C,IAAI,QAAQ,CAChB,IAAIW,EAAc,EAAKtI,MAAMuI,WAAW3E,MAAK,SAAA4E,GAAG,OAC5ChK,KAAKC,UAAU+J,EAAIjH,QAAU/C,KAAKC,UAAUuG,EAAK2C,IAAI,YAEzDvF,QAAQC,IAAIiG,GAERZ,EADD1C,EAAK2C,IAAI,eACCD,EAAOM,OAAO,KAAMM,EAAYG,KAAK,KAErCf,EAAOM,OAAO,KAAMM,EAAYG,KAAK,KAGtD,EAAKnI,SAAS,CACVoH,SACAgB,UAAU,IAEd,EAAKC,UAAUjB,KApGL,EAwGlBkB,WAAY,WACR,EAAKtI,SAAS,CACVE,UAAU,IAEdqB,EAAqBS,mBAAmB,EAAKtC,MAAM0I,UAClDhK,MAAK,SAAAC,GACCA,EAAIkK,SACH,EAAKvI,SAAS,CACVE,UAAU,EACVkI,SAAU/J,EAAImK,YAGlB,EAAKxI,SAAS,CACVE,UAAU,EACVkI,SAAU,OAIlB,EAAKpI,SAAS,CACVkH,MAAO,EAAKxH,MAAMwH,MAAMQ,OAAOrJ,EAAIqG,WAG1CjE,OAAM,SAAApC,GAAG,OAAIyD,QAAQC,IAAI1D,EAAIuG,cA9HhB,EAiIlB4C,cAAgB,SAACvG,GACbM,EAAqBY,qBAAqBlB,GACzC7C,MAAK,SAAAC,GACE,IAAIA,EACA,MAAMA,EAEN,IAAIoK,EAAU,CAACpK,GACnB,EAAK2B,SAAS,CACVE,UAAU,EACVkI,SAAU,KACVlB,MAAOuB,OAKlBhI,OAAM,SAAApC,GACH,EAAK2B,SAAS,CACVC,MAAO,cAlJD,EAuJlBoI,UAAY,SAAC5G,GACTF,EAAqBC,iBAAiBC,GACrCrD,MAAK,SAAAC,GACCA,EAAIkK,SACH,EAAKvI,SAAS,CACVE,UAAU,EACVkI,SAAU/J,EAAImK,YAGlB,EAAKxI,SAAS,CACVE,UAAU,EACVkI,SAAU,OAGlB,EAAKpI,SAAS,CACVkH,MAAO,EAAKxH,MAAMwH,MAAMQ,OAAOrJ,EAAIqG,WAI1CjE,OAAM,SAAApC,GAAG,OAAIyD,QAAQC,IAAI1D,EAAIuG,cA1KhB,EA6KlB8D,eAAiB,WACV,EAAKhJ,MAAMiJ,SACV,EAAK3I,SAAS,CACV4I,QAAS,SACTD,UAAU,EACVE,QAAS,WAGb,EAAK7I,SAAS,CACV4I,QAAS,GACTD,UAAU,EACVE,QAAS,cAxLH,EAmNlBC,cAAgB,WACZ,EAAK9I,SAAS,CACV8H,KAAM,EAAKpI,MAAMoI,KAAKJ,OAAOqB,SAASC,eAAe,QAAQ3I,SAEjE0I,SAASC,eAAe,QAAQ3I,MAAQ,IAvN1B,EA0NlB4I,eAAe,WACX,EAAKjJ,SAAS,CAAC8H,KAAM,MA3NP,EA8NnBoB,WAAW,SAACrF,GACS,UAAdA,EAAM0B,MACL1B,EAAM9D,iBACT,EAAK+I,kBAjOS,EAqOnB7M,WAAW,SAAC4H,GACR,IAAIsF,EAAQtF,EAAM1D,OAAOE,MACrB+I,EAAc,EAAK1J,MAAMoI,KACxBuB,EAAaD,EAAYE,MAAM,EAAGH,GAAOzB,OAAO0B,EAAYE,MAAMH,EAAM,EAAGC,EAAYzE,SAC3F,EAAK3E,SAAS,CAAE8H,KAAMuB,KAvOtB,EAAKrC,aAAc,EAAKA,aAAauC,KAAlB,gBAEnB,EAAK7J,MAAQ,CACTwH,MAAO,GACPhH,UAAU,EACV+G,UAAU,EACVa,KAAM,GACN0B,WAAW,EACXC,SAAU,GACVC,aAAc,GACdzB,WAAY,GACZU,UAAU,EACVC,QAAS,SACTC,QAAS,SACTzB,OAAQ,GACRgB,SAAU,KACVnI,MAAO,UAlBG,E,8EA8Ld,OACI,yBAAKnD,UAAU,eACX,yBAAKrB,GAAG,WAAWyB,IAAKC,IAAMC,IAAI,kB,kCAM1C,OAA2B,OAAxBH,KAAKyC,MAAM0I,SACF,6BACJ,0BAAMtL,UAAU,SAAhB,qCACA,4BAAQA,UAAU,qBAAlB,eAGI,6BACJ,4BAAQA,UAAU,oBAAoBE,QAASC,KAAKqL,YAApD,gBACA,4BAAQxL,UAAU,oBAAoBE,QAASC,KAAK8J,UAApD,iB,0CAiCR,IAAI4C,EAAmB1M,MACvB,yBAAA2M,EAAAC,OAAA,kEAAAD,EAAA,MAC2B9L,MAAM,mDAAmDM,MAAK,SAAAC,GAAG,OAAGA,EAAIE,WADnG,cACQuL,EADR,kBAAAF,EAAA,MAE6B9L,MAAM,uDAAuDM,MAAK,SAAAC,GAAG,OAAGA,EAAIE,WAFzG,cAEQwL,EAFR,kBAAAH,EAAA,MAGuB9L,MAAM,iCAAiCM,MAAK,SAAAC,GAAG,OAAGA,EAAIE,WAH7E,OAGQyL,EAHR,OAKQC,EAAqBD,EAAOtF,KAAKwF,QAAO,SAAAhC,GAAG,MAAqB,UAAjBA,EAAIiC,YAEvDR,EAAiB3J,SAAS,CACtByJ,SAAUK,EAAWpF,KACrBgF,aAAcK,EAAarF,KAC3BuD,WAAYgC,IAVpB,sCAaAG,K,yCAIArB,SAASC,eAAe,kBAAkBqB,SAAU,I,sCAIrD,IAAI,IAAI5C,EAAE,EAAGA,EAAE,EAAGA,IACdsB,SAASuB,kBAAkB,SAAS7C,GAAG4C,SAAU,I,+BAI/C,IAAD,OACJ,IAAI1O,eAAe0B,QACf,OAAQ,6BACJ,yDACA,kBAAC,IAAD,CACIP,UAAU,WACVC,GAAG,KAFP,cAQR,IAAIwN,EAActN,KAAKyC,MAAMwH,MAAMlC,KAAI,SAAA5B,GAC/B,OAAO,kBAAC,EAAD,iBAAiBA,EAAjB,CAAuBmC,IAAKnC,EAAK3H,SAGjB,IAA5BwB,KAAKyC,MAAMwH,MAAMvC,QAAgB1H,KAAKyC,MAAMuH,WAC3CsD,EAAc,0EAGlB,IAAIC,EAAkB,qCAEM,IAAzBvN,KAAKyC,MAAM8J,YACVgB,EACI,4BAAQvJ,KAAK,iBAAiBxF,GAAG,kBAAkBqB,UAAU,kBAAkB2N,aAAc,WACzF,4BAAQC,QAAM,EAACrK,MAAM,WAAWpD,KAAKyC,MAAM8J,UAAU,IACpDvM,KAAKyC,MAAM8J,UAAU,GAAG,GAAGxE,KAAI,SAAAyC,GAC5B,OAAO,4BAAQhM,GAAG,QAAQ8J,IAAKkC,EAAGxG,KAAK,QAAQZ,MAAO,KAAKoH,EAAE,KAAMA,QA2BnF,OACI,yBAAK3K,UAAU,SACX,6BAASA,UAAU,WACf,0BAAMrB,GAAG,aAAawF,KAAK,aAAaJ,SAAU5D,KAAK+J,cACnD,oDACA,2BAAOlK,UAAU,oBAAoBkE,KAAK,QAAQX,MAAM,aAAarD,QAASC,KAAKgM,iBACnF,8BAAUnM,UAAU,eAChB,2BAAO6N,QAAQ,WAAW7N,UAAU,eAApC,aACA,2BAAOrB,GAAG,WAAWuF,KAAK,OAAOlE,UAAU,cAAcmE,KAAK,OAAO2J,YAAY,gBACjF,6BACA,0BAAM9N,UAAWG,KAAKyC,MAAMO,OAA5B,wCAEJ,8BAAUnD,UAAU,eAChB,2BAAOA,UAAU,eAAjB,SACA,yBAAKA,UAAU,iBACX,yCAAc,2BAAOkE,KAAK,QAAQC,KAAK,gBAAgB4J,gBAAc,EAACxK,MAAM,UAEhF,yBAAKvD,UAAU,iBACX,0CAAe,2BAAOkE,KAAK,QAAQC,KAAK,gBAAgBZ,MAAM,UAElE,yBAAKvD,UAAU,kBAAkBE,QAAS,kBAAM,EAAK8N,qBACjD,2BAAOhO,UAAU,cAAjB,QAAmC,2BAAOrB,GAAG,aAAauF,KAAK,WAAWC,KAAK,QAAQZ,MAAM,OAC7F,2BAAOvD,UAAU,cAAjB,OAAkC,2BAAOrB,GAAG,YAAYuF,KAAK,WAAWC,KAAK,QAAQZ,MAAM,OAC3F,2BAAOvD,UAAU,cAAjB,QAAmC,2BAAOrB,GAAG,aAAauF,KAAK,WAAWC,KAAK,QAAOZ,MAAM,OAC5F,2BAAOvD,UAAU,cAAjB,MAAiC,2BAAOrB,GAAG,WAAWuF,KAAK,WAAWC,KAAK,QAAQZ,MAAM,OACzF,2BAAOvD,UAAU,cAAjB,QAAmC,2BAAOrB,GAAG,aAAauF,KAAK,WAAWC,KAAK,QAAQZ,MAAM,QAEjG,yBAAKvD,UAAU,gBACX,2CAAgB,2BAAOE,QAAS,kBAAM,EAAK+N,iBAAiBtP,GAAG,iBAAiBuF,KAAK,QAAQC,KAAK,QAAQZ,MAAM,QAGpH,yBAAKvD,UAAU,iBACX,2BAAOA,UAAU,OAAjB,OACA,yBAAKA,UAAU,gBACX,oCAAY,2BAAOkE,KAAK,QAAQC,KAAK,cAAcZ,MAAM,WACzD,mCAAQ,2BAAOW,KAAK,QAAQC,KAAK,cAAcZ,MAAM,UACrD,oCAAY,2BAAOW,KAAK,QAAQC,KAAK,cAAcZ,MAAM,YAE7D,2BAAOW,KAAK,SAASlE,UAAU,SAASmE,KAAK,MAAM+J,IAAI,IAAIC,IAAI,cAGvE,8BAAUnO,UAAU,eAChB,2BAAOA,UAAU,eAAjB,SACA,4BAAQmE,KAAK,aAAaxF,GAAG,aAAYqB,UAAU,YAAY2N,aAAc,WACzE,4BAAQjF,UAAQ,EAACkF,QAAM,EAACrK,MAAM,WAA9B,aACC6K,EAAajF,WAAWjB,KAAI,SAAAyC,GACzB,OAAO,4BAAQhM,GAAG,aAAa8J,IAAKkC,EAAGxG,KAAK,QAAQZ,MAAO,KAAKoH,EAAE,KAAMA,OAIhF,4BAAQxG,KAAK,QAAQxF,GAAG,QAAQqB,UAAU,QAAQ2N,aAAc,UAAWnF,SAAU,SAAC9G,GAAD,OAvE3E,SAACqF,GAC3B,IAAI7C,EAAO6C,EAAM1D,OAAOE,MAAMiJ,MAAM,EAAGzF,EAAM1D,OAAOE,MAAMsE,OAAO,GAC7DwG,EAAY,GACJ,aAATnK,EACCmK,EAAUvL,KAAK,EAAKF,MAAM+J,UACV,iBAATzI,EACPmK,EAAUvL,KAAK,EAAKF,MAAMgK,cACV,SAAT1I,EACPmK,EAAUvL,KAAKsL,EAAa/E,WACZ,gBAATnF,EACPmK,EAAUvL,KAAKsL,EAAa9E,kBACZ,aAATpF,EACPmK,EAAUvL,KAAKsL,EAAa7E,eACZ,YAATrF,GAA+B,eAATA,GAC7BmK,EAAUvL,KAAKsL,EAAa3E,eAG7B4E,EAAUxG,OAAS,GACtB,EAAK3E,SAAS,CAAEwJ,UAAW,CAACxI,EAAMmK,KAqDyEC,CAAwB5M,KACnH,4BAAQgH,UAAQ,EAACkF,QAAM,EAACrK,MAAM,WAA9B,QACK6K,EAAahF,MAAMlB,KAAI,SAAAyC,GACpB,OAAO,4BAAQhM,GAAG,QAAQ8J,IAAKkC,EAAGxG,KAAK,QAAQZ,MAAO,KAAKoH,EAAE,KAAMA,OAG3E,6BACExK,KAAKyC,MAAM8J,UAA2BgB,EAAf,+BACzB,yBAAK1N,UAAU,gBACX,2BAAOA,UAAU,cAAjB,QAAmC,2BAAOkE,KAAK,QAAQC,KAAK,aAAaZ,MAAM,eAC/E,2BAAOvD,UAAU,cAAjB,WAAsC,2BAAOkE,KAAK,QAAQC,KAAK,aAAaZ,MAAM,kBAClF,2BAAOvD,UAAU,cAAjB,oBAA+C,2BAAOkE,KAAK,QAAQC,KAAK,aAAaZ,MAAM,mBAGnG,8BAAUvD,UAAS,sBAAiBG,KAAKyC,MAAMkJ,UAC/C,2BAAO9L,UAAU,eAAjB,cADA,IACkD,0BAAMA,UAAU,WAAhB,sCAC9C,2BAAOrB,GAAG,OAAOuF,KAAK,OAAOlE,UAAU,0BAA0BmE,KAAK,OAAOoK,WAAYpO,KAAKiM,WAAY0B,YAAY,aACtH,yBAAK9N,UAAU,oBACX,2BAAOkE,KAAK,SAASlE,UAAU,SAASuD,MAAM,QAAQrD,QAASC,KAAKgM,iBACpE,2BAAOjI,KAAK,SAASlE,UAAU,SAASuD,MAAM,MAAOrD,QAASC,KAAK6L,iBAEvE,6BACI,iDACC,wBAAIhM,UAAU,YACVG,KAAKyC,MAAMoI,KAAK9C,KAAI,SAAC+C,EAAGN,GACzB,OAAO,wBAAI3K,UAAU,eAAeE,QAAS,EAAKf,WAAYoE,MAAOoH,EAAGhM,GAAIgM,EAAGlC,IAAKkC,GAC/EM,EADE,iBAOnB,8BAAUjL,UAAS,sBAAiBG,KAAKyC,MAAMkJ,UAC3C,6BACI,2BAAO9L,UAAU,eAAjB,SACA,4BAAQmE,KAAK,QAAQnE,UAAU,cAAc2N,aAAc,WAC3D,4BAAQC,QAAM,EAACrK,MAAM,WAArB,SACK6K,EAAazE,OAAOzB,KAAI,SAAAyC,GACrB,OAAO,4BAAQhM,GAAG,QAAQ8J,IAAKkC,EAAGxG,KAAK,QAAQZ,MAAOoH,GAAIA,OAGlE,yBAAK3K,UAAU,gBACX,oCAAY,2BAAOkE,KAAK,QAAQC,KAAK,gBAAgBZ,MAAM,WAC3D,mCAAQ,2BAAOW,KAAK,QAAQC,KAAK,gBAAgBZ,MAAM,UACvD,oCAAY,2BAAOW,KAAK,QAAQC,KAAK,gBAAgBZ,MAAM,aAGnE,6BACI,2BAAOvD,UAAU,eAAjB,aACA,4BAAQmE,KAAK,YAAYnE,UAAU,cAAc2N,aAAc,WAC/D,4BAAQC,QAAM,EAACrK,MAAM,WAArB,aACK6K,EAAazE,OAAOzB,KAAI,SAAAyC,GACrB,OAAO,4BAAQhM,GAAG,YAAY8J,IAAKkC,EAAGxG,KAAK,YAAYZ,MAAOoH,GAAIA,OAG1E,yBAAK3K,UAAU,gBACX,oCAAY,2BAAOkE,KAAK,QAAQC,KAAK,oBAAoBZ,MAAM,WAC/D,mCAAQ,2BAAOW,KAAK,QAAQC,KAAK,oBAAoBZ,MAAM,UAC3D,oCAAY,2BAAOW,KAAK,QAAQC,KAAK,oBAAoBZ,MAAM,aAGvE,6BACI,2BAAOvD,UAAU,eAAjB,oBACA,2BAAOkE,KAAK,SAASC,KAAK,eAC1B,6BACA,yBAAKnE,UAAU,gBACX,oCAAY,2BAAOkE,KAAK,QAAQC,KAAK,qBAAqBZ,MAAM,UAChE,mCAAQ,2BAAOW,KAAK,QAAQC,KAAK,qBAAqBZ,MAAM,SAC5D,oCAAY,2BAAOW,KAAK,QAAQC,KAAK,qBAAqBZ,MAAM,YAGxE,6BACI,2BAAOvD,UAAU,eAAjB,WACA,4BAAQmE,KAAK,UAAUnE,UAAU,cAAc2N,aAAc,WAC7D,4BAAQC,QAAM,EAACrK,MAAM,WAArB,WACK6K,EAAa1E,aAAaxB,KAAI,SAAAyC,GAC3B,OAAO,4BAAQhM,GAAG,UAAU8J,IAAKkC,EAAGxG,KAAK,UAAUZ,MAAOoH,GAAIA,OAGtE,yBAAK3K,UAAU,gBACX,oCAAY,2BAAOkE,KAAK,QAAQC,KAAK,kBAAkBZ,MAAM,WAC7D,mCAAQ,2BAAOW,KAAK,QAAQC,KAAK,kBAAkBZ,MAAM,UACzD,oCAAY,2BAAOW,KAAK,QAAQC,KAAK,kBAAkBZ,MAAM,cAIzE,8BAAUvD,UAAS,sBAAiBG,KAAKyC,MAAMkJ,UAC/C,2BAAO+B,QAAQ,SAAS7N,UAAU,eAAlC,UACI,4BAAQmE,KAAK,SAASxF,GAAG,SAASqB,UAAU,cAAc2N,aAAc,WACpE,4BAAQC,QAAM,EAACrK,MAAM,WAArB,UACK6K,EAAa5E,OAAOtB,KAAI,SAAAyC,GACrB,OAAO,4BAAQhM,GAAG,SAAS8J,IAAKkC,EAAGxG,KAAK,SAASZ,MAAOoH,GAAIA,OAGxE,yBAAK3K,UAAU,gBACX,oCAAY,2BAAOkE,KAAK,QAAQC,KAAK,iBAAiBZ,MAAM,SAC5D,mCAAQ,2BAAOW,KAAK,QAAQC,KAAK,iBAAiBZ,MAAM,QACxD,oCAAY,2BAAOW,KAAK,QAAQC,KAAK,iBAAiBZ,MAAM,WAGpE,8BAAUvD,UAAS,sBAAiBG,KAAKyC,MAAMkJ,UAC/C,2BAAO+B,QAAQ,OAAO7N,UAAU,eAAhC,OACI,2BAAOkE,KAAK,OAAOsK,KAAK,OAAOxO,UAAU,cAAcmE,KAAK,SAC5D,8BAAUxF,GAAG,QACRwB,KAAKyC,MAAMuI,WAAWjD,KAAI,SAAAkD,GACvB,OAAO,4BAAQzM,GAAG,YAAY8J,IAAK2C,EAAIzM,GAAIwF,KAAMiH,EAAIC,KAAM9H,MAAO6H,EAAIjH,WAG1E,6BACJ,kEAAuC,2BAAOD,KAAK,WAAWC,KAAK,cAAcZ,MAAM,SAE3F,6BACI,2BAAOvD,UAAU,wBAAwBE,QAASC,KAAKyL,eAAgB1H,KAAK,SAASX,MAAOpD,KAAKyC,MAAMmJ,UACvG,2BAAO/L,UAAU,oBAAoBkE,KAAK,QAAQX,MAAM,aAAarD,QAASC,KAAKgM,iBACnF,2BAAOnM,UAAU,oBAAoBkE,KAAK,SAASX,MAAM,cAIrE,yBAAKvD,UAAU,kBACVG,KAAKyC,MAAMQ,UAAwC,IAA5BjD,KAAKyC,MAAMwH,MAAMvC,OAAe,yCAAsB,gCAEjF1H,KAAKyC,MAAMQ,UAAwC,IAA5BjD,KAAKyC,MAAMwH,MAAMvC,OAAe1H,KAAKsO,iBAAmB,+BAChF,6BACA,yBAAKzO,UAAU,gBACkB,IAA5BG,KAAKyC,MAAMwH,MAAMvC,OAAc4F,EAAa,gCAEhDtN,KAAKyC,MAAMQ,SAAWjD,KAAKsO,iBAAmB,+BAClB,IAA5BtO,KAAKyC,MAAMwH,MAAMvC,OAAc,8BAAQ1H,KAAKuO,iB,GAnfpBhO,cCHpBiO,G,kBAElB,WAAYpM,GAAO,IAAD,8BACd,4CAAMA,KASTH,WAAa,SAAC2E,EAAON,GACjBM,EAAM9D,iBACNlB,EAAeK,WAAWqE,GAC1B,IAAImI,EAAY,EAAK9O,QAAQ8D,MAAMwJ,QAAO,SAAAyB,GAAC,OAAIA,EAAExM,UAAYoE,KAC7D,EAAK3G,QAAQ+D,YAAY+K,GACzB,EAAK1L,SAAS,CAACU,MAAOgL,KAfT,EA+BjBE,cAAgB,WACZ,EAAK5L,SAAS,CACV6L,YAAa,MAjCJ,EAsCjBC,YAAc,SAACvI,GACX,EAAK3G,QAAQmP,QAAQxI,GACrB,EAAKvD,SAAS,CAACU,MAAO,EAAK9D,QAAQ8D,QACnChF,OAAOC,eAAeC,QAAQC,EAAOR,MAAO,EAAKuB,QAAQ8D,QAzC5C,EA4CjBsL,WAAa,SAACnI,GACVA,EAAM9D,iBACNlB,EAAeE,SAAS,EAAKnC,QAAQS,QAAS,EAAKqC,MAAMmM,aACxDzN,MAAK,SAAAmF,GAAI,OAAI,EAAKuI,YAAYvI,MAC/B,EAAKqI,iBA9CN,EAAKlM,MAAO,CACXgB,MAAO,GACPmL,YAAa,IAEjB,EAAKD,cAAgB,EAAKA,cAAcrC,KAAnB,gBANJ,E,2EAkBF,IAAD,SACWtM,KAAKL,QAAnB8D,MACP,YAFU,MACK,GADL,GAEGsE,KAAI,SAAAzB,GAAI,OACjB,yBAAKzG,UAAU,OAAOyI,IAAKhC,EAAKpE,SACxB,kBAAC,IAAD,CAAMrC,UAAU,WAAWC,GAAE,gBAAWwG,EAAKpE,UAAYoE,EAAKtE,WAC9D,yBAAKnC,UAAU,eACX,kBAAC,IAAD,CAAMC,GAAG,gBAAe,4BAAQD,UAAU,mBAAlB,cACxB,4BAAQA,UAAU,oBAAoBE,QAAS,SAAAwB,GAAC,OAAI,EAAKU,WAAWV,EAAG+E,EAAKpE,WAA5E,sB,+BA0BX,IAAD,OAMJ,OAAIxD,eAAe0B,QAWf,oCACA,wCACA,yBAAKP,UAAU,eACVG,KAAKgP,cACN,8BAEA,0BAAMpL,SAAU5D,KAAK+O,YACjB,oDACA,8CACA,2BAAOhL,KAAK,OAAOC,KAAK,YAAYZ,MAAOpD,KAAKyC,MAAMmM,YAAavG,SAzB5D,SAACzB,GAChB,EAAK7D,SAAS,CACV6L,YAAYhI,EAAM1D,OAAOE,WAwBrB,2BAAOW,KAAK,SAASlE,UAAU,YAAYuD,MAAM,SApBjD,6BACJ,yDACA,kBAAC,IAAD,CACIvD,UAAU,WACVC,GAAG,KAFP,kB,GA9DsBS,cAAjBiO,EACVhO,YAAclB,E,YCFJ2P,G,kBAMjB,WAAY7M,GAAO,IAAD,8BACd,4CAAMA,KAkBVyD,QAAU,aAnBQ,EAuBlBE,mBAAqB,aAvBH,EAmDlBmJ,WAAW,WACK,CAAC,WAAY,UAAW,UAAW,cAAe,OAAQ,eAAgB,YAChFnH,KAAI,SAAAoH,GAEN,OADA,EAAKC,UAAUD,GACR,aAvDG,EA2DlBE,aAAc,WACiB,cAAxB,EAAK5M,MAAM6M,SACV,EAAKvM,SAAS,CAACuM,SAAU,cAEzB,EAAKvM,SAAS,CAACuM,SAAU,eA5D7B,EAAK7M,MAAO,CACR8M,SAAU,GACVrN,QAAS,KACTsN,SAAU,GACVhD,SAAU,GACViD,QAAS,GACTC,QAAS,GACTC,YAAa,GACbC,KAAM,GACNnD,aAAc,GACdoD,SAAU,GACVP,SAAU,YACVxJ,eAAgB,aAfN,E,uEA2BRgK,GACN,IAAIC,EAAM,GACNC,EAAmBhQ,KAAKyC,MAAM8M,SAAStC,QAAO,SAAA9G,GAC9C,OAAGA,EAAKpC,KAAKkM,OAAOH,IAAgB,EACzB3J,EAEJ,MAEP+J,EAAe,IACnBF,EAAiBG,SAAQ,SAAAhK,GACrB,GAAG+J,EAAa7J,MAAK,SAAA+J,GAAC,OAAIA,EAAE7K,YAAcY,EAAKZ,aAAW,CACtD,IAAI2G,EAAQgE,EAAaG,WAAU,SAAAD,GAAC,OAAIA,EAAE7K,YAAcY,EAAKZ,aAC7D2K,EAAahE,GAAOoE,aAEpBJ,EAAavN,KAAb,eAAsBwD,EAAtB,CAA4BmK,MAAO,OAExCC,OAAOC,OAAO,OACc,IAA5BR,EAAiBtI,UAEhBqI,EADWD,GACCI,EACZlQ,KAAK+C,SAASgN,M,0CAoBD,IAAD,OAChB,GAAGrR,eAAe0B,QAAQ,CAAC,IACpBiF,EAAUrF,KAAKoC,MAAMqO,MAAMC,OAA3BrL,OACHmK,EAAWxP,KAAKL,QAAQ8D,MAAM4C,MAAK,SAAAC,GAAI,OAAIA,EAAKpE,UAAYqE,OAAOlB,MACvErF,KAAK+C,SAAS,CACVb,QAASmD,EACTmK,SAAUA,EAASxN,YAEvBmD,EAAqBC,YAAYC,GAC5BlE,MAAK,SAAA8I,GAAU,EAAKlH,SAAS,CAC1BwM,SAAUtF,IAEd,EAAKiF,mB,iCAMF3N,EAAG/C,GACV+C,EAAEuB,iBACFqC,EAAqBO,WAAWlH,GAChC,IAAImS,EAAY3Q,KAAKyC,MAAM8M,SAAStC,QAAO,SAAArC,GAAC,OAAIA,EAAEjF,UAAYnH,KAC9DwB,KAAK+C,SAAS,CACVwM,SAAUoB,M,iCAIPC,GAEP,IADA,IAAIC,EAAQ,EACJrG,EAAE,EAAGA,EAAEoG,EAASlJ,OAAQ8C,IAC5BqG,GAAeD,EAASpG,GAAG8F,MAE/B,OAAOO,I,+BAGD,IAAD,OACL,IAAInS,eAAe0B,QACf,OACI,6BACI,yDACA,kBAAC,IAAD,CACAP,UAAU,WACVC,GAAG,KAFH,cAOZ,IAQ2BqG,EARrB8C,EAAQ,CAAC,CAACjF,KAAM,WAAYvB,MAAOzC,KAAKyC,MAAM+J,UACpD,CAACxI,KAAM,UAAWvB,MAAOzC,KAAKyC,MAAMgN,SACpC,CAACzL,KAAM,UAAWvB,MAAOzC,KAAKyC,MAAMiN,SACpC,CAAC1L,KAAM,cAAevB,MAAOzC,KAAKyC,MAAMkN,aACxC,CAAC3L,KAAM,OAAQvB,MAAOzC,KAAKyC,MAAMmN,MACjC,CAAC5L,KAAM,eAAgBvB,MAAOzC,KAAKyC,MAAMgK,cACzC,CAACzI,KAAM,WAAYvB,MAAOzC,KAAKyC,MAAMoN,WAarC,OACI,iCACI,wBAAIhQ,UAAU,YAAYG,KAAKyC,MAAM+M,UACrC,yBAAK3P,UAAU,eACX,yBAAKA,UAAU,SAAf,UAA+BG,KAAKyC,MAAM8M,SAAS7H,OAAnD,KACA,yBAAK7H,UAAU,SAAf,cAAmCG,KAAKyC,MAAM+J,SAAS9E,OAAvD,KACA,yBAAK7H,UAAU,SAAf,aAAkCG,KAAKyC,MAAMiN,QAAQhI,OAArD,KACA,yBAAK7H,UAAU,SAAf,iBAAsCG,KAAKyC,MAAMkN,YAAYjI,QAC7D,yBAAK7H,UAAU,SAAf,cAAmCG,KAAKyC,MAAMgN,QAAQ/H,QACtD,yBAAK7H,UAAU,SAAf,UAA+BG,KAAKyC,MAAMmN,KAAKlI,QAC/C,yBAAK7H,UAAU,SAAf,kBAAuCG,KAAKyC,MAAMgK,aAAa/E,SAEnE,4BAAQ3D,KAAK,SAASlE,UAAU,kBAAkBE,QAASC,KAAKqP,cAAerP,KAAKyC,MAAM6M,UAC1F,6BAEyB,cAAxBtP,KAAKyC,MAAM6M,SAEZ,yBAAKzP,UAAU,oBACVoJ,EAAMlB,KAAI,SAAAhE,GACP,OACI,yBAAKlE,UAAU,cAAcyI,IAAKvE,EAAKC,MACvC,4BAAKD,EAAKC,KAAV,MAAmB,EAAK8M,WAAW/M,EAAKtB,QACnCsB,EAAKtB,MAAMsF,KAAI,SAAA5B,GACZ,OAAGA,EAAKmK,MAAQ,EACT,uBAAGzQ,UAAU,WAAWE,QAAS,EAAK8F,QAASyC,IAAKnC,EAAKR,SAAUQ,EAAKZ,UAAxE,MAAsFY,EAAKmK,OACpF,uBAAGzQ,UAAU,WAAYE,QAAS,EAAK8F,QAASyC,IAAKnC,EAAKR,SAAUQ,EAAKZ,mBAO3G,yBAAK1F,UAAU,gBACVG,KAAKyC,MAAM8M,SAASxH,KAAI,SAAA5B,GAAI,OACzB,yBAAKtG,UAAU,OAAOyI,IAAKnC,EAAKR,SAC5B,uBAAG9F,UAAU,YAAYsG,EAAKZ,WAC9B,yBAAKpF,IAAKgG,EAAKZ,UAAWtF,IAAKkG,EAAKX,YACpC,6BACA,4BAAQzF,QAAS,SAAAwB,GAAC,OAAI,EAAKmE,WAAWnE,EAAG4E,EAAKR,WAA9C,eAMZ,yBAAKnH,GAAG,aAAaqB,UAAWG,KAAKyC,MAAMqD,gBACvC,0BAAMjG,UAAU,QAAQE,QAASC,KAAK+F,oBAAtC,WAxDeI,EAyDGnG,KAAKyC,WAxD/BoC,QAAQC,IAAIqB,KA2DZ,kBAAC,IAAD,CAAMrG,GAAG,gBAAe,4BAAQD,UAAU,UAAlB,mB,GA5LQU,cAAvB0O,EACVzO,YAAclB,EADJ2P,EAEVhL,aAAc,CACjBwM,MAAO,CAAEC,OAAQ,K,ICiCVK,E,2MApCXtO,MAAO,CACHrC,QAAS3B,OAAOC,eAAe0B,QAC/BqD,MAAOxC,KAAK+P,MAAMtS,eAAeI,QAAQ,UAEzC4E,YAAa,SAACD,GACV,IAAIwN,EAAchQ,KAAKC,UAAUuC,GAOjC,OANAhF,OAAOC,eAAeC,QAAQC,EAAOR,MAAO6S,GAC5C,EAAKlO,SAAS,CACV3C,QAAS3B,OAAOC,eAAe0B,QAC/BqD,MAAOxC,KAAK+P,MAAMvS,OAAOC,eAAe+E,SAGrC,QAGXqL,QAAS,SAACxI,GACN,IAAI4K,EAAY,EAAKzO,MAAMgB,MAAMd,KAAK2D,GAClC2K,EAAahQ,KAAKC,UAAUgQ,GAChCzS,OAAOC,eAAeC,QAAQC,EAAOR,MAAO6S,IAEhDrR,QAAS,kBACL,EAAKmD,SAAS,CACV3C,QAAS,S,wEAMjB,OACI,kBAAC,EAAY+Q,SAAb,CAAsB/N,MAAOpD,KAAKyC,OAC7BzC,KAAKoC,MAAMgP,c,GA/BD7Q,aC0BZ8Q,MApBf,WACE,OACA,kBAAC,EAAD,KACE,gCACE,kBAAC,EAAD,OAEF,0BAAMxR,UAAU,OACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyR,OAAK,EAACC,KAAM,IAAKC,UAAW/Q,IACnC,kBAAC,IAAD,CAAO8Q,KAAM,aAAcC,UAAWrP,IACtC,kBAAC,IAAD,CAAOoP,KAAM,gBAAiBC,UAAWtN,IACzC,kBAAC,IAAD,CAAOqN,KAAM,eAAgBC,UAAW/H,IACxC,kBAAC,IAAD,CAAO8H,KAAM,WAAYC,UAAWhD,IACpC,kBAAC,IAAD,CAAO+C,KAAM,gBAAiBC,UAAWvC,Q,MClBjDwC,IAASC,OACT,kBAAC,IAAD,KACA,kBAAC,EAAD,OAEA5F,SAASC,eAAe,W","file":"static/js/main.7e105762.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/731.b7e9cda5.gif\";","module.exports = __webpack_public_path__ + \"static/media/SBBLogo.c7b183d7.png\";","export default {\r\n  API_SCRYFALL: 'https://api.scryfall.com/',\r\n  API_ENDPOINT: 'https://ultimatetutor-api.herokuapp.com/api',\r\n  TOKEN_KEY: 'auth-token',\r\n  USER_ID: 'user_id',\r\n  DECKS: 'decks'\r\n}\r\n  ","import config from '../config';\r\n\r\nconst TokenService = {\r\n  saveAuthToken(token, id) {\r\n    window.sessionStorage.setItem(config.TOKEN_KEY, token)\r\n    window.sessionStorage.setItem(config.USER_ID, id)\r\n  },\r\n  \r\n  getAuthToken() {\r\n    return window.sessionStorage.getItem(config.TOKEN_KEY)\r\n  },\r\n\r\n  clearAuthToken() {\r\n    window.sessionStorage.removeItem(config.TOKEN_KEY)\r\n    window.sessionStorage.removeItem(config.USER_ID)\r\n    window.sessionStorage.removeItem(config.DECKS)\r\n  },\r\n\r\n  hasAuthToken() {\r\n    return !!TokenService.getAuthToken()\r\n  },\r\n\r\n  makeBasicAuthToken(userName, password) {\r\n    return window.btoa(`${userName}:${password}`)\r\n  },\r\n};\r\n\r\nexport default TokenService","import React from 'react';\r\n\r\nconst UserContext = React.createContext();\r\n\r\n\r\nexport default UserContext","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport TokenService from '../../services/token-service';\r\nimport UserContext from '../../context/user-context';\r\nimport './Header.css';\r\nimport logo from '../Images/SBBLogo.png';\r\n\r\nexport default class Header extends Component {\r\n  static contextType = UserContext;\r\n\r\n  handleLogoutClick = () => {\r\n    TokenService.clearAuthToken()\r\n    this.context.clearId()\r\n  };\r\n\r\n  renderLogoutLink() {\r\n    return (\r\n      <div className='header-buttons'>\r\n        <Link \r\n          className='navLink'\r\n          to='/MyDecks'>\r\n            My Decks\r\n        </Link>\r\n        <Link \r\n          className='navLink'\r\n          to='/SearchCards'>\r\n            Search\r\n        </Link>\r\n        <Link\r\n          className='navLink'\r\n          to='/'\r\n          onClick={this.handleLogoutClick}>\r\n            Logout\r\n        </Link>\r\n      </div>\r\n    )\r\n  };\r\n    \r\n  renderLoginLink() {\r\n    return (\r\n      <div className='header-buttons'>\r\n        <Link \r\n          className='navLink'\r\n          to='/LoginPage'>\r\n            Login\r\n        </Link>\r\n        <Link \r\n          className='navLink'\r\n          to='/RegisterPage'>\r\n            Register\r\n        </Link>\r\n      </div>\r\n    )\r\n  };\r\n\r\n  render() {\r\n    return <>\r\n      <nav className='header'>\r\n        <Link \r\n          className='navLink logo'\r\n          to='/'>\r\n            <img className='utlogo' src={logo} alt='UT logo'/>\r\n        </Link>\r\n        <div className='headerbottom'>\r\n          {this.context.user_id?this.renderLogoutLink() :this.renderLoginLink()}\r\n        </div>\r\n      </nav>\r\n    </>\r\n  }\r\n};","import React, {Component} from 'react';\r\nimport './LandingPage.css';\r\n\r\nexport default class LandingPage extends Component {\r\n    render() {\r\n        return(\r\n            <div>\r\n                <p>Search all of the cards in the Magic: the Gathering universe for the perfect cards to build your deck</p>\r\n                <p>See official rulings/errata on a card</p>\r\n                <p>Coming Soon: Add some basic lands to your deck and test draw your first hand</p>\r\n                <p>SignUp and start building your decks now</p>\r\n                <p>Or use the Demo User account to see how it works</p>\r\n                <p>User Name: DemoUser </p>\r\n                <p>Password: DemoUser1!</p>\r\n            </div>\r\n        )\r\n    }\r\n};","import config from '../config';\r\n\r\nconst AuthApiService = {\r\n  postLogin(credentials) {\r\n    return fetch(`${config.API_ENDPOINT}/auth/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(credentials),\r\n    })\r\n      .then(res =>\r\n        (!res.ok)\r\n          ? res.json().then(e => Promise.reject(e))\r\n          : res.json()\r\n      )\r\n  },\r\n  \r\n  postUser(user) {\r\n    return fetch(`${config.API_ENDPOINT}/users`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(user),\r\n    })\r\n    .then(res =>\r\n      (!res.ok)\r\n      ? res.json().then(e => Promise.reject(e))\r\n      :res.json()\r\n      )\r\n  },\r\n};\r\n\r\nexport default AuthApiService","import config from '../config';\r\nimport TokenService from '../services/token-service';\r\n\r\nconst DeckApiService = {\r\n  getDecks() {\r\n    return fetch(`${config.API_ENDPOINT}/decks`, {\r\n      method: 'GET',\r\n      headers: {\r\n          'authorization': `bearer ${TokenService.getAuthToken()}`\r\n      },\r\n    })\r\n      .then(res =>\r\n        (!res.ok)\r\n          ? res.json().then(e => Promise.reject(e))\r\n          : res.json()\r\n      )\r\n  },\r\n  \r\n  postDeck(user_id, deckname) {\r\n    return fetch(`${config.API_ENDPOINT}/decks`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'content-type': 'application/json',\r\n        'authorization': `bearer ${TokenService.getAuthToken()}`\r\n      },\r\n      body: JSON.stringify({\r\n        user_id: user_id,\r\n        deck_name: deckname,\r\n      }),\r\n    })\r\n      .then(res =>\r\n        (!res.ok)\r\n          ? res.json().then(e => Promise.reject(e))\r\n          : res.json()\r\n      )\r\n  },\r\n\r\n  deleteDeck(deck_id) {\r\n    return fetch(`${config.API_ENDPOINT}/decks`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'content-type': 'application/json',\r\n        'authorization': `bearer ${TokenService.getAuthToken()}`\r\n      },\r\n      body: JSON.stringify({\r\n        deck_id: deck_id,\r\n      }),\r\n    })\r\n      .then(res =>\r\n        (!res.ok)\r\n          ? res.json().then(e => Promise.reject(e))\r\n          : res.json()\r\n      )\r\n  }\r\n};\r\n\r\nexport default DeckApiService\r\n","import React, {Component} from 'react';\r\nimport AuthApiService from '../../services/auth-api-service';\r\nimport TokenService from '../../services/token-service';\r\nimport './LoginPage.css';\r\nimport UserContext from '../../context/user-context';\r\nimport DeckApiService from '../../services/deck-api-service';\r\nimport thinking from '../Images/731.gif';\r\n\r\nexport default class LoginPage extends Component {\r\n  static contextType = UserContext;\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = { \r\n      error: null, \r\n      user_id: null,\r\n      thinking: false,\r\n    }\r\n  }\r\n\r\n  static defaultProps = {\r\n        location: {},\r\n        history: {\r\n          push: () => {},\r\n        },\r\n      }\r\n\r\n  async handleSetUserInfo() {\r\n    let decks = await DeckApiService.getDecks()\r\n    let contextSet = await this.context.updateDecks(decks)\r\n    this.handleLoginSuccess(contextSet)\r\n  };\r\n      \r\n  handleLoginSuccess = () => {\r\n    const { location, history } = this.props\r\n    const destination = (location.state || {}).from || '/MyDecks'\r\n    history.push(destination)\r\n  };\r\n\r\n  handleSubmitJwtAuth = ev => {\r\n    ev.preventDefault()\r\n    this.setState({ \r\n      error: null,\r\n      thinking: true,\r\n    })\r\n    const { username, password} = ev.target\r\n    AuthApiService.postLogin({\r\n      username: username.value,\r\n      password: password.value,\r\n    })\r\n    .then(res => \r\n      {\r\n        username.value = ''\r\n        password.value = ''\r\n        TokenService.saveAuthToken(res.authToken, res.payload.user_id)\r\n        this.handleSetUserInfo()\r\n    })\r\n    .catch(res => {\r\n      this.setState({ error: res.error })\r\n      })\r\n    };\r\n\r\n  render(){\r\n    return(<>\r\n      <form onSubmit= {this.handleSubmitJwtAuth}>\r\n        <div role='alert'>\r\n          {this.state.error && <p className='red'>{this.state.error}</p>}\r\n        </div>\r\n        <fieldset>\r\n          <legend>Login</legend>\r\n            <label>User Name: </label>\r\n            <input required type='text' name='username'></input>\r\n            <br/>\r\n            <label>Password: </label>\r\n            <input required type='password' name='password'></input>\r\n            <br/>\r\n            <input type='submit' value='Login'/>\r\n        </fieldset>\r\n      </form>\r\n      <br/>\r\n      {this.state.thinking? <img id='thinking' src={thinking} alt='loading...'/>: <span></span>}\r\n    </>\r\n  )\r\n}\r\n};","import React, {Component} from 'react';\r\nimport AuthApiService from '../../services/auth-api-service';\r\nimport './RegisterPage.css';\r\nimport thinking from '../Images/731.gif';\r\n\r\nexport default class RegisterPage extends Component {\r\n  state= {\r\n    error:null,\r\n    registerthinking: false,\r\n  };\r\n\r\n  static defaultProps = {\r\n    history: {\r\n      push: () => {},\r\n    },\r\n  };\r\n    \r\n  handleRegistrationSuccess = user => {\r\n    const { history } = this.props\r\n    history.push('/LoginPage')\r\n  };\r\n\r\n  handleSubmitNewUser = ev => {\r\n    ev.preventDefault()\r\n    this.setState({ \r\n      error: null,\r\n      registerthinking: true,\r\n    })\r\n    const { username, password} = ev.target\r\n    AuthApiService.postUser({\r\n      username: username.value,\r\n      password: password.value,\r\n    })\r\n    .then(res => \r\n      {\r\n        username.value = ''\r\n        this.handleRegistrationSuccess()\r\n    })\r\n    .catch(res => {\r\n      this.setState({ error: res.error })\r\n      })\r\n  };\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <form onSubmit={this.handleSubmitNewUser}>\r\n          <div role='alert'>\r\n            {this.state.error && <p className='red'>{this.state.error}</p>}\r\n          </div>\r\n          <fieldset>\r\n            <legend>Register New User</legend>\r\n              <label>New User Name: </label>\r\n              <span className='criteria'>*Case sensitive</span>\r\n              <br/>\r\n              <input type='text' name='username'></input>\r\n              <br/>\r\n              <br/>\r\n              <label>Password: </label>\r\n              <br/>\r\n              <span className='criteria'>*Must be 8 characters long and inclue Capital, number, and one of #?!@$%^&*-</span>\r\n              <br/>\r\n              <input type='password' name='password'></input>\r\n              <br/>\r\n              {this.state.registerthinking?<img id='thinking' src={thinking} alt='loading...'/> : <button type='submit'>Register</button>}\r\n          </fieldset>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n};","import config from '../config';\r\n\r\nconst MTGCardSearchService = {\r\n    getSearchResults(parameters) {\r\n        return fetch(config.API_SCRYFALL+'cards/search?q='+parameters,{\r\n            method: \"GET\",\r\n            mode: 'cors',\r\n            handlers: {\r\n                'content-type':'application/json'\r\n            }\r\n        })\r\n        .then(res => {\r\n            if (!res.ok) {\r\n              throw new Error(res.status)\r\n            }\r\n            return res.json()\r\n            })\r\n        .catch(error => console.log({error}))\r\n    },\r\n\r\n    getNextPageResults(uri){\r\n        return fetch(uri,{\r\n            method: \"GET\",\r\n            mode: 'cors',\r\n            handlers: {\r\n                'content-type':'application/json'\r\n            }\r\n        })\r\n        .then(res => {\r\n            if (!res.ok) {\r\n              throw new Error(res.status)\r\n            }\r\n            return res.json()\r\n            })\r\n        .catch(error => console.log({error}))\r\n    },\r\n\r\n    getRulings(uri){\r\n        return fetch(uri,{\r\n            method: \"GET\",\r\n            mode: 'cors',\r\n            handlers: {\r\n                'content-type':'application/json'\r\n            }\r\n        })\r\n        .then(res => {\r\n            if (!res.ok) {\r\n              throw new Error(res.status)\r\n            }\r\n            return res.json()\r\n            })\r\n        .catch(error => console.log({error}))\r\n    },\r\n\r\n    getNameSearchResults(name) {\r\n        return fetch(config.API_SCRYFALL+'cards/named?fuzzy='+name,{\r\n            method:\"GET\",\r\n            mode: 'cors',\r\n            handlers: {\r\n                'content-type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => {\r\n            if (!res.ok) {\r\n                throw new Error(res.status)\r\n              }\r\n              return res.json()\r\n              })\r\n          .catch(error => console.log({error}))\r\n    }\r\n};\r\n\r\nexport default MTGCardSearchService","import config from '../config';\r\nimport TokenService from '../services/token-service';\r\n\r\nconst SingleDeckApiService = {\r\n  getDeckList(deckId) {\r\n    return fetch(`${config.API_ENDPOINT}/decks/${deckId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n          'authorization': `bearer ${TokenService.getAuthToken()}`\r\n      },\r\n    })\r\n      .then(res =>\r\n        (!res.ok)\r\n          ? res.json().then(e => Promise.reject(e))\r\n          : res.json()\r\n      )\r\n  },\r\n \r\n  postNewCard(card_name, image_url, multiverseid, deck_id, type) {\r\n     return fetch(`${config.API_ENDPOINT}/decks/${deck_id}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'content-type': 'application/json',\r\n        'authorization': `bearer ${TokenService.getAuthToken()}`\r\n      },\r\n      body: JSON.stringify({\r\n        card_name,\r\n        image_url,\r\n        multiverseid,\r\n        deck_id,\r\n        type,\r\n      }),\r\n    })\r\n      .then(res =>\r\n        (!res.ok)\r\n          ? res.json().then(e => Promise.reject(e))\r\n          : res.json()\r\n      )\r\n      .catch(res => console.log(res))\r\n  },\r\n\r\n  deleteCard(card_id, deck_id) {\r\n    return fetch(`${config.API_ENDPOINT}/decks/${deck_id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'content-type': 'application/json',\r\n        'authorization': `bearer ${TokenService.getAuthToken()}`\r\n      },\r\n      body: JSON.stringify({\r\n        card_id\r\n      }),\r\n    })\r\n      .then(res =>\r\n        (!res.ok)\r\n          ? res.json().then(e => Promise.reject(e))\r\n          : res.json()\r\n      )\r\n  }\r\n};\r\n\r\nexport default SingleDeckApiService","import React, {Component} from 'react';\r\nimport './CardResults.css';\r\nimport UserContext from '../../context/user-context';\r\nimport MTGCardSearchService from '../../services/mtgcard-api-service';\r\nimport SingleDeckApiService from '../../services/Single-deck-api-service';\r\n\r\nexport default class CardResults extends Component{\r\n    static contextType = UserContext;\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            imageModalView: \"hidemodal\",\r\n            rulingsModalView: \"hidemodal\",\r\n            selectedDeck: 0,\r\n            buttonAbility: true,\r\n            rulings: [],\r\n            added: false,\r\n            addedCard: '',\r\n            addedToDeck: ''\r\n        }\r\n    }\r\n\r\n    getCardRulings(uri) {\r\n        MTGCardSearchService.getRulings(uri)\r\n        .then(res =>{\r\n            if(res.data.length > 0){\r\n                this.setState({\r\n                    rulingsModalView: 'showmodal',\r\n                    rulings: res.data,\r\n            })\r\n            } else {\r\n                this.setState({\r\n                    rulingsModalView: 'showmodal',\r\n                    rulings: [],\r\n                })\r\n            }\r\n        })\r\n        .catch(res => console.log(res.warnings))\r\n    }\r\n    \r\n    closeUp = () => {\r\n        this.setState({ imageModalView: 'showmodal'});\r\n    };\r\n\r\n    removeImageCloseUp = () => {\r\n        this.setState({ imageModalView: 'hidemodal'});\r\n    };\r\n\r\n    removeRulingsCloseUp = () => {\r\n        this.setState({ rulingsModalView: 'hidemodal'})\r\n    }\r\n\r\n    revealConfirmation = (card) => {\r\n        let thisDeck = this.context.decks.find(deck => Number(card.deck_id) === deck.deck_id);\r\n        this.setState({\r\n            added: true,\r\n            addedCard: card.card_name,\r\n            addedToDeck: thisDeck.deck_name\r\n        });\r\n    };\r\n\r\n    addCardToDeck=(event)=>{\r\n        event.preventDefault();\r\n        ////\r\n        let image;\r\n        if(this.props.layout === 'transform'){\r\n            image = this.props.card_faces[0].image_uris.border_crop + ', ' + this.props.card_faces[1].image_uris.border_crop\r\n        } else {\r\n            image = this.props.image_uris.normal\r\n        }\r\n\r\n        console.log(image)\r\n\r\n            SingleDeckApiService.postNewCard(\r\n                this.props.name, \r\n                image, \r\n                this.props.multiverse_ids[0], \r\n                this.state.selectedDeck,\r\n                this.props.type_line,\r\n                )\r\n            .then(res=> this.revealConfirmation(res))\r\n        \r\n    };\r\n\r\n    handleDeckChange=(event)=>{\r\n        event.preventDefault();\r\n        this.setState({\r\n            selectedDeck: event.target.value,\r\n            buttonAbility: false,\r\n        })\r\n    };\r\n\r\n    render(){\r\n        function image(card) {\r\n            if(card.layout === 'transform'){\r\n                return card.card_faces[0].image_uris.border_crop\r\n            } else {\r\n                return card.image_uris.border_crop\r\n            }\r\n        };\r\n        \r\n        function closeUpGenerator (card) {\r\n            if(card.layout === 'transform'){\r\n            return (<div>\r\n                <img className=\"modal-content\" alt={card.name} src={card.card_faces[0].image_uris.border_crop}/>\r\n                <img className=\"modal-content\" alt={card.name} src={card.card_faces[1].image_uris.border_crop}/>\r\n            </div>)\r\n            } else {\r\n                return <img className=\"modal-content\" alt={card.name} src={card.image_uris.border_crop}/>;\r\n            }\r\n        };\r\n        \r\n        const rulingsUri = this.props.rulings_uri;\r\n\r\n        let foundRulings= <p className='caption'>There are no rulings for this card at this time.</p>;\r\n        if(this.state.rulings.length > 0){\r\n            foundRulings = this.state.rulings.map(rulingObj => {\r\n                return <p className='caption'>{rulingObj.published_at}: {rulingObj.comment}</p>\r\n            })\r\n        } \r\n        \r\n    return(\r\n        <div className='card'>\r\n            <p className='cardName'>{this.props.name}</p>\r\n            <div className='bottomCard'>\r\n            <img className='cardImage' alt={this.props.name} src={image(this.props)} onClick={this.closeUp}/><br/>\r\n            <button className='cardButton' onClick={() => this.getCardRulings(rulingsUri)}>Rulings</button>\r\n            <form id={this.props.id} onSubmit={this.addCardToDeck}>\r\n                <select className='pickDeckOption' name='decklist' id='decklist' form='decklist' value={this.state.selectedDeck} onChange={this.handleDeckChange}>\r\n                    <option value='none'>Pick a deck</option>\r\n                    {this.context.decks.map(deck =>\r\n                        <option type='select' name='deck' key={deck.deck_id} value={deck.deck_id}>{deck.deck_name}</option>\r\n                    )}   \r\n                </select>\r\n                <br/>\r\n                <input className='addToDeckButton cardButton' type='submit' value='Add to deck' disabled={this.state.buttonAbility}/>\r\n            </form>\r\n        </div>\r\n        <div className='addedConfirmation'>\r\n            {this.state.added? <span>Added {this.state.addedCard} to {this.state.addedToDeck}</span>: <span></span>}\r\n        </div>\r\n        <div id=\"rulingsModal\"className={this.state.rulingsModalView}>\r\n            <span className=\"close\" onClick={this.removeRulingsCloseUp}>&#x02717;</span>\r\n            {foundRulings}\r\n            <div id=\"legalities\" className='caption'>\r\n                <p>Standard: {this.props.legalities.standard}</p>\r\n                <p>Pioneer: {this.props.legalities.pioneer}</p>\r\n                <p>Modern: {this.props.legalities.modern}</p>\r\n                <p>Legacy: {this.props.legalities.legacy}</p>\r\n                <p>Vintage: {this.props.legalities.vintage}</p>\r\n                <p>Brawl: {this.props.legalities.brawl}</p>\r\n            </div>\r\n        </div>\r\n        <div id=\"imageModal\" className={this.state.imageModalView}>\r\n            <span className=\"close\" onClick={this.removeImageCloseUp}>&#x02717;</span>\r\n            {closeUpGenerator(this.props)}\r\n        </div>\r\n    </div>    \r\n    )\r\n    }\r\n}\r\n","\r\nconst supertypes = [\r\n    \"Basic\",\r\n    \"Host\",\r\n    \"Legendary\",\r\n    \"Snow\",\r\n    \"World\"\r\n]\r\n\r\nconst types =[\r\n    \"Artifact\",\r\n    \"Conspiracy\",\r\n    \"Creature\",\r\n    \"Enchantment\",\r\n    \"Hero\",\r\n    \"Instant\",\r\n    \"Land\",\r\n    \"Phenomenon\",\r\n    \"Plane\",\r\n    \"Planeswalker\",\r\n    \"Scheme\",\r\n    \"Sorcery\",\r\n    \"Summon\",\r\n    \"Tribal\",\r\n    \"Vanguard\"\r\n]\r\n\r\nconst landTypes = [\r\n    \"Desert\",\r\n    \"Forest\",\r\n    \"Gate\",\r\n    \"Island\",\r\n    \"Lair\",\r\n    \"Locus\",\r\n    \"Mine\",\r\n    \"Mountain\",\r\n    \"Plains\",\r\n    \"Power-Plant\",\r\n    \"Swamp\",\r\n    \"Tower\",\r\n    \"Urza’s\"\r\n]\r\n\r\nconst enchantmentTypes = [\r\n    \"Aura\",\r\n    \"Cartouche\",\r\n    \"Curse\",\r\n    \"Saga\",\r\n    \"Shrine\"\r\n]\r\n\r\nconst artifactTypes =[\r\n    \"Clue\",\r\n    \"Contraption\",\r\n    \"Equipment\",\r\n    \"Food\",\r\n    \"Fortification\",\r\n    \"Treasure\",\r\n    \"Vehicle\"\r\n]\r\n\r\nconst rarity = [\r\n    \"Common\",\r\n\t\"Uncommon\",\r\n\t\"Rare\",\r\n\t\"Mythic\"   \r\n]\r\n\r\nconst instSorcTypes =[\r\n    \"Adventure\",\r\n    \"Arcane\",\r\n    \"Trap\"\r\n]\r\n\r\nconst loyaltyTypes = [\r\n    \"*\",\r\n    \"X\",\r\n    \"2\",\r\n    \"3\",\r\n    \"4\",\r\n    \"5\",\r\n    \"6\",\r\n    \"7\",\r\n    \"20\"\r\n]\r\n\r\nconst powTou = [\r\n    '-1',\r\n    '0',\r\n    '*',\r\n    '.5',\r\n    '1',\r\n    '1.5',\r\n    '2',\r\n    '2.5',\r\n    '3',\r\n    '3.5',\r\n    '4',\r\n    '5',\r\n    '6',\r\n    '7',\r\n    '8',\r\n    '9',\r\n    '10',\r\n    '11',\r\n    '12',\r\n    '13',\r\n    '14',\r\n    '15',\r\n    '16',\r\n    '20',\r\n    '99'\r\n]\r\n\r\nexport default {\r\n    supertypes,\r\n    types,\r\n    landTypes,\r\n    enchantmentTypes,\r\n    artifactTypes,\r\n    rarity,\r\n    instSorcTypes,\r\n    loyaltyTypes,\r\n    powTou,\r\n}","import React, {Component} from 'react';\r\n//import ReactDOM from 'react-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport CardResults from '../CardResults/CardResults';\r\nimport MTGCardSearchService from '../../services/mtgcard-api-service';\r\nimport logo from '../Images/731.gif';\r\nimport paramOptions from './SearchParamsData';\r\n\r\nimport './SearchCards.css';\r\n\r\nexport default class SearchCards extends Component {\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.handleSubmit= this.handleSubmit.bind(this)\r\n\r\n        this.state = {\r\n            cards: [],\r\n            thinking: false,\r\n            searched: false,\r\n            text: [],\r\n            validType: false,\r\n            Creature: [],\r\n            Planeswalker: [],\r\n            setOptions: [],\r\n            expanded: false,\r\n            visible: 'hidden',\r\n            exp_col: 'Expand',\r\n            string: '',\r\n            nextPage: null,\r\n            error: 'hidden'\r\n        }\r\n    }\r\n\r\n    executeScroll= () => {\r\n        console.log('scrollnow')\r\n        window.scrollTo({\r\n            top: 800,\r\n            behavior: 'smooth'\r\n        })\r\n    }\r\n\r\n    scrollUp =()=>{\r\n        window.scrollTo({\r\n            top: 0,\r\n            behavior: 'auto'\r\n        })\r\n    }\r\n\r\n    handleSubmit=(event)=> {\r\n        this.executeScroll();\r\n        event.preventDefault();\r\n        this.setState({\r\n            thinking: true,\r\n            searched: true,\r\n            cards: []\r\n        })\r\n        const data = new FormData(event.target);\r\n        let string ='';\r\n        let queryParams = [\r\n            'types', 'supertypes', 'typeOption', 'additionalType'\r\n        ];\r\n\r\n        if(data.get('name')){\r\n            const regex= / /gi;\r\n            let nameString = data.get('name').replace(regex, '+')\r\n            this.sendNameFetch(nameString)\r\n        } else {\r\n            queryParams.map(i => {\r\n                if(data.get(i)){\r\n                    string = string.concat(data.get(i))\r\n                }\r\n                return string;\r\n            });\r\n            \r\n            let operatorParams = ['power', 'toughness', 'combinedPT', 'loyalty', 'rarity', 'cmc'];\r\n            //check that there is an operator value\r\n            operatorParams.map(i => {\r\n                if(data.get(i) === 'default' || data.get(i) === ''){\r\n                    return 'return';\r\n                } else {\r\n                    string = string.concat(data.get(i+'Operator') + data.get(i) + '+')\r\n                }\r\n                return string;\r\n            })\r\n\r\n            if(data.get('color')){\r\n                let collectColors='';\r\n                data.getAll('color').map(c => collectColors = collectColors.concat(c))\r\n                string = string.concat(data.get('colorOperator') +collectColors+'+')\r\n            }\r\n            \r\n            if(this.state.text.length !== 0){\r\n                this.state.text.map(t => \r\n                    string = string.concat('o:\"' + t + '\"+')\r\n                    )\r\n            }\r\n            if(data.get('sets')){\r\n                let selectedSet = this.state.setOptions.find(set => \r\n                    JSON.stringify(set.name) === JSON.stringify(data.get('sets'))\r\n                )\r\n                console.log(selectedSet)\r\n                if(data.get('blockSearch')){\r\n                    string = string.concat('b:'+ selectedSet.code+'+')\r\n                } else {\r\n                    string = string.concat('s:'+ selectedSet.code+'+')\r\n                }\r\n            }\r\n            this.setState({ \r\n                string,\r\n                nextPage: false,\r\n            })\r\n            this.sendFetch(string)\r\n        }\r\n    }\r\n\r\n    searchMore =()=>{\r\n        this.setState({ \r\n            thinking: true,\r\n         });\r\n        MTGCardSearchService.getNextPageResults(this.state.nextPage)\r\n        .then(res =>{\r\n            if(res.has_more){\r\n                this.setState({\r\n                    thinking: false,\r\n                    nextPage: res.next_page\r\n                })\r\n            } else {\r\n                this.setState({ \r\n                    thinking: false,\r\n                    nextPage: null\r\n                })\r\n                \r\n            }\r\n            this.setState({\r\n                cards: this.state.cards.concat(res.data),\r\n            })\r\n        })\r\n        .catch(res => console.log(res.warnings))\r\n    }\r\n\r\n    sendNameFetch = (name) => {\r\n        MTGCardSearchService.getNameSearchResults(name)\r\n        .then(res => {\r\n                if(!res){\r\n                    throw res\r\n                } else {\r\n                    let cardArr = [res]\r\n                this.setState({ \r\n                    thinking: false,\r\n                    nextPage: null,\r\n                    cards: cardArr\r\n                })\r\n                }\r\n            //if(this.state.cards.length > 0){this.executeScroll()}\r\n        })\r\n        .catch(res => {\r\n            this.setState({\r\n                error: 'error'\r\n            })\r\n        })\r\n    }\r\n\r\n    sendFetch = (parameters) => {\r\n        MTGCardSearchService.getSearchResults(parameters)\r\n        .then(res =>{\r\n            if(res.has_more){\r\n                this.setState({\r\n                    thinking: false,\r\n                    nextPage: res.next_page\r\n                })\r\n            } else {\r\n                this.setState({ \r\n                    thinking: false,\r\n                    nextPage: null\r\n                })\r\n            }\r\n            this.setState({\r\n                cards: this.state.cards.concat(res.data),\r\n            })\r\n            //if(this.state.cards.length > 0){this.executeScroll()}\r\n        })\r\n        .catch(res => console.log(res.warnings))\r\n    }\r\n\r\n    expandCollapse = () => {\r\n        if(this.state.expanded){\r\n            this.setState({\r\n                visible: 'hidden',\r\n                expanded: false,\r\n                exp_col: 'Expand',\r\n        })\r\n        } else {\r\n            this.setState({\r\n                visible: '',\r\n                expanded: true,\r\n                exp_col: 'Collapse',\r\n            })\r\n        }\r\n    }\r\n\r\n    renderThinking() {\r\n        return (\r\n            <div className='thinkingBox'>\r\n                <img id='thinking' src={logo} alt='loading...'/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    moreButon() {\r\n        if(this.state.nextPage === null){\r\n            return (<div>\r\n                <span className='alert'>No more cards match your criteria</span>\r\n                <button className='moreoption button'>New Search</button>\r\n                </div>)\r\n        } else {\r\n            return (<div>\r\n                <button className='moreoption button' onClick={this.searchMore}>More Results</button>\r\n                <button className='moreoption button' onClick={this.scrollUp}>New Search</button>\r\n                </div>)\r\n        }\r\n    }\r\n\r\n    handleAddText = () => {\r\n        this.setState({\r\n            text: this.state.text.concat(document.getElementById(\"text\").value)\r\n        })\r\n        document.getElementById(\"text\").value = ''\r\n    }\r\n\r\n    clearTextState=()=> {\r\n        this.setState({text: []})\r\n    }\r\n\r\n   keyPressed=(event)=>{\r\n       if(event.key === 'Enter'){\r\n           event.preventDefault()\r\n        this.handleAddText()\r\n       } \r\n   }\r\n\r\n   removeItem=(event)=>{\r\n       let index = event.target.value\r\n       let currentText = this.state.text\r\n        let newTextArr = currentText.slice(0, index).concat(currentText.slice(index+1, currentText.length))\r\n        this.setState({ text: newTextArr})\r\n   }\r\n\r\n   \r\n\r\n    componentDidMount(){\r\n        let currentComponent = this;\r\n        async function fetchDropdowns(){\r\n            let creatTypes = await fetch('https://api.scryfall.com/catalog/creature-types').then(res=> res.json());\r\n            let planeswTypes = await fetch('https://api.scryfall.com/catalog/planeswalker-types').then(res=> res.json());\r\n            let setOpt = await fetch('https://api.scryfall.com/sets').then(res=> res.json());\r\n            \r\n            let filteredSetOptions = setOpt.data.filter(set => set.set_type !== \"token\")\r\n\r\n            currentComponent.setState({\r\n                Creature: creatTypes.data,\r\n                Planeswalker: planeswTypes.data,\r\n                setOptions: filteredSetOptions\r\n            })\r\n        };\r\n        fetchDropdowns();\r\n    };\r\n\r\n    uncheckColorless(){\r\n        document.getElementById('colorColorless').checked = false\r\n    };\r\n\r\n    uncheckColors(){\r\n       for(let i=0; i<5; i++){\r\n           document.getElementsByName('color')[i].checked = false\r\n       }\r\n    };\r\n    \r\n    render(){\r\n        if(!sessionStorage.user_id){\r\n            return (<div>\r\n                <h4>Oops you arn't logged in!</h4>\r\n                <Link \r\n                    className='homeLink'\r\n                    to='/'>\r\n                    Home Page\r\n                </Link>\r\n                </div>)\r\n        }\r\n\r\n        let cardResults = this.state.cards.map(card =>{\r\n                return <CardResults {...card} key={card.id}/>   \r\n        })\r\n\r\n        if(this.state.cards.length === 0 && this.state.searched){\r\n            cardResults = <p>No cards were found matching your criteria</p>\r\n        }\r\n\r\n        let showNewDropdown = <p>wrong</p>\r\n\r\n        if(this.state.validType !== false){\r\n            showNewDropdown = (\r\n                <select name='additionalType' id='additionaltypes' className='additionaltypes' defaultValue={'default'}>\r\n                    <option hidden value='default'>{this.state.validType[0]}</option> \r\n                    {this.state.validType[1][0].map(i => {\r\n                        return <option id='power' key={i} name='power' value={'t:'+i+'+'}>{i}</option>\r\n                    })} \r\n                </select>\r\n            )\r\n        }\r\n    \r\n        let additionalTypesDropdown = (event)=>{\r\n            let type = event.target.value.slice(2, event.target.value.length-1);\r\n            let typeArray = [];\r\n            if(type === 'Creature'){\r\n                typeArray.push(this.state.Creature)\r\n            } else if (type === 'Planeswalker'){\r\n                typeArray.push(this.state.Planeswalker)\r\n            } else if (type === 'Land'){\r\n                typeArray.push(paramOptions.landTypes)\r\n            } else if (type === 'Enchantment'){\r\n                typeArray.push(paramOptions.enchantmentTypes)\r\n            } else if (type === 'Artifact'){\r\n                typeArray.push(paramOptions.artifactTypes)\r\n            } else if (type === 'Instant' || type === 't:Sorcery+'){\r\n                typeArray.push(paramOptions.instSorcTypes)\r\n            } \r\n\r\n            if(typeArray.length > 0){\r\n            this.setState({ validType: [type, typeArray]})\r\n            }\r\n        }\r\n        return(\r\n            <div className='outer'>\r\n                <section className='section'>\r\n                    <form id='SearchForm' name='SearchForm' onSubmit={this.handleSubmit}>\r\n                        <legend>Search for cards</legend>\r\n                        <input className='formbutton button' type='reset' value='Reset Form' onClick={this.clearTextState}/>\r\n                        <fieldset className='fieldsetBox'>\r\n                            <label htmlFor='cardName' className='searchLabel'>Card Name</label> \r\n                            <input id='cardName' type='text' className='selectStyle' name='name' placeholder='Black Lotus'/>\r\n                            <br/>\r\n                            <span className={this.state.error}>Too many cards match ambiguous name</span>\r\n                        </fieldset>\r\n                        <fieldset className='fieldsetBox'>\r\n                            <label className='searchLabel'>Color</label>\r\n                            <div className='colorOperator'>\r\n                                <label>at most<input type='radio' name='colorOperator' defaultChecked value='c<='/></label>\r\n                            </div>\r\n                            <div className='colorOperator'>\r\n                                <label>at least<input type='radio' name='colorOperator' value='c>='/></label>\r\n                            </div>\r\n                            <div className='colorCheckboxes' onClick={() => this.uncheckColorless()}>\r\n                                <label className='colorLabel'>White<input id='colorWhite' type='checkbox' name='color' value='w'/></label>\r\n                                <label className='colorLabel'>Blue<input id='colorBlue' type='checkbox' name='color' value='u'/></label>\r\n                                <label className='colorLabel'>Black<input id='colorBlack' type='checkbox' name='color'value='b'/></label>\r\n                                <label className='colorLabel'>Red<input id='colorRed' type='checkbox' name='color' value='r'/></label>\r\n                                <label className='colorLabel'>Green<input id='colorGreen' type='checkbox' name='color' value='g'/></label>\r\n                            </div>\r\n                            <div className='colorlessBox'>\r\n                                <label>Colorless<input onClick={() => this.uncheckColors()} id='colorColorless' type='radio' name='color' value='c'/></label>\r\n                            </div>\r\n                            \r\n                            <div className='cmcCheckboxes'>\r\n                                <label className='cmc'>CMC</label>\r\n                                <div className='cmcOperators'>\r\n                                    <label>&lt;=<input type='radio' name='cmcOperator' value='cmc<='/></label>\r\n                                    <label>=<input type='radio' name='cmcOperator' value='cmc='/></label>\r\n                                    <label>&gt;=<input type='radio' name='cmcOperator' value='cmc>='/></label>\r\n                                </div>\r\n                                <input type='number' className='center' name='cmc' min='0' max='1000001'/>\r\n                            </div>\r\n                        </fieldset>\r\n                        <fieldset className='fieldsetBox'>\r\n                            <label className='searchLabel'>Types</label>\r\n                            <select name='supertypes' id='supertypes'className='supertype' defaultValue={'default'}>\r\n                                <option disabled hidden value='default'>SuperType</option>\r\n                                {paramOptions.supertypes.map(i => {\r\n                                    return <option id='supertypes' key={i} name='types' value={'t:'+i+'+'}>{i}</option>\r\n                                })}\r\n                            </select>\r\n                            \r\n                            <select name='types' id='types' className='types' defaultValue={'default'} onChange={(e) =>additionalTypesDropdown(e)}>\r\n                            <option disabled hidden value='default'>Type</option>\r\n                                {paramOptions.types.map(i => {\r\n                                    return <option id='types' key={i} name='types' value={'t:'+i+'+'}>{i}</option>\r\n                                })} \r\n                            </select>\r\n                            <br/>\r\n                            {!this.state.validType ? <span></span>: showNewDropdown}\r\n                            <div className='typeRadioBox'>\r\n                                <label className='radioLabel'>Modal<input type='radio' name='typeOption' value='is:modal+'/></label>\r\n                                <label className='radioLabel'>Historic<input type='radio' name='typeOption' value='is:historic+'/></label>\r\n                                <label className='radioLabel'>Textless Creature<input type='radio' name='typeOption' value='is:vanilla+'/></label>\r\n                            </div>\r\n                        </fieldset>\r\n                        <fieldset className={`fieldsetBox ${this.state.visible}`}>\r\n                        <label className='searchLabel'>Exact text</label> <span className='tooltip'>you can use ~ inplace of card name</span>\r\n                            <input id='text' type='text' className='selectStyle showTooltip' name='text' onKeyPress={this.keyPressed} placeholder='hexproof'/>\r\n                            <div className='exactTextButtons'>\r\n                                <input type='button' className='button' value='Clear' onClick={this.clearTextState}/>\r\n                                <input type='button' className='button' value='Add'  onClick={this.handleAddText}/>\r\n                            </div>\r\n                            <div>\r\n                                <label>Searching for:</label>\r\n                                {<ul className='textList'>\r\n                                    {this.state.text.map((t, i)=>{\r\n                                    return <li className='textListItem' onClick={this.removeItem} value={i} id={i} key={i}>\r\n                                        {t} &#x02717;\r\n                                        </li>\r\n                                    })}\r\n                                </ul>}\r\n                            </div>\r\n                        </fieldset>\r\n                        <fieldset className={`fieldsetBox ${this.state.visible}`}>\r\n                            <div>\r\n                                <label className='searchLabel'>Power</label>\r\n                                <select name='power' className='selectStyle' defaultValue={'default'}>\r\n                                <option hidden value='default'>Power</option> \r\n                                    {paramOptions.powTou.map(i => {\r\n                                        return <option id='power' key={i} name='power' value={i}>{i}</option>\r\n                                    })}\r\n                                </select>\r\n                                <div className='typeRadioBox'>\r\n                                    <label>&gt;=<input type='radio' name='powerOperator' value='pow>='/></label>\r\n                                    <label>=<input type='radio' name='powerOperator' value='pow='/></label>\r\n                                    <label>&lt;=<input type='radio' name='powerOperator' value='pow<='/></label>\r\n                                </div>\r\n                            </div>\r\n                            <div>\r\n                                <label className='searchLabel'>Toughness</label>\r\n                                <select name='toughness' className='selectStyle' defaultValue={'default'}>\r\n                                <option hidden value='default'>Toughness</option> \r\n                                    {paramOptions.powTou.map(i => {\r\n                                        return <option id='toughness' key={i} name='toughness' value={i}>{i}</option>\r\n                                    })}\r\n                                </select>\r\n                                <div className='typeRadioBox'>\r\n                                    <label>&gt;=<input type='radio' name='toughnessOperator' value='tou>='/></label>\r\n                                    <label>=<input type='radio' name='toughnessOperator' value='tou='/></label>\r\n                                    <label>&lt;=<input type='radio' name='toughnessOperator' value='tou<='/></label>\r\n                                </div>\r\n                            </div>\r\n                            <div>\r\n                                <label className='searchLabel'>Combined P and T</label>\r\n                                <input type='number' name='combinedPT'/>\r\n                                <br/>\r\n                                <div className='typeRadioBox'>\r\n                                    <label>&gt;=<input type='radio' name='combinedPTOperator' value='pt>='/></label>\r\n                                    <label>=<input type='radio' name='combinedPTOperator' value='pt='/></label>\r\n                                    <label>&lt;=<input type='radio' name='combinedPTOperator' value='pt<='/></label>\r\n                                </div>\r\n                            </div>\r\n                            <div>\r\n                                <label className='searchLabel'>Loyalty</label>\r\n                                <select name='loyalty' className='selectStyle' defaultValue={'default'}>\r\n                                <option hidden value='default'>Loyalty</option> \r\n                                    {paramOptions.loyaltyTypes.map(i => {\r\n                                        return <option id='loyalty' key={i} name='loyalty' value={i}>{i}</option>\r\n                                    })}\r\n                                </select>\r\n                                <div className='typeRadioBox'>\r\n                                    <label>&gt;=<input type='radio' name='loyaltyOperator' value='loy>='/></label>\r\n                                    <label>=<input type='radio' name='loyaltyOperator' value='loy='/></label>\r\n                                    <label>&lt;=<input type='radio' name='loyaltyOperator' value='loy<='/></label>\r\n                                </div>\r\n                            </div>\r\n                        </fieldset>\r\n                        <fieldset className={`fieldsetBox ${this.state.visible}`}>\r\n                        <label htmlFor='rarity' className='searchLabel'>Rarity</label>\r\n                            <select name='rarity' id='rarity' className='selectStyle' defaultValue={'default'}>\r\n                                <option hidden value='default'>Select</option>\r\n                                    {paramOptions.rarity.map(i => {\r\n                                        return <option id='rarity' key={i} name='rarity' value={i}>{i}</option>\r\n                                    })}\r\n                            </select>\r\n                            <div className='typeRadioBox'>\r\n                                <label>&gt;=<input type='radio' name='rarityOperator' value='r>='/></label>\r\n                                <label>=<input type='radio' name='rarityOperator' value='r='/></label>\r\n                                <label>&lt;=<input type='radio' name='rarityOperator' value='r<='/></label>\r\n                            </div>\r\n                        </fieldset>\r\n                        <fieldset className={`fieldsetBox ${this.state.visible}`}>\r\n                        <label htmlFor='sets' className='searchLabel'>Set</label>\r\n                            <input type='text' list='sets' className='selectStyle' name='sets'/>\r\n                            <datalist id='sets'>\r\n                                {this.state.setOptions.map(set => {\r\n                                    return <option id='setoption' key={set.id} name={set.code} value={set.name}></option>\r\n                                })}\r\n                                </datalist>\r\n                                <br/>\r\n                            <label>Search Block Containing This Set<input type='checkbox' name='blockSearch' value='b:'/></label>\r\n                        </fieldset>\r\n                        <div>\r\n                            <input className='collapseButton button' onClick={this.expandCollapse} type='button' value={this.state.exp_col}/>\r\n                            <input className='formbutton button' type='reset' value='Reset Form' onClick={this.clearTextState}/>\r\n                            <input className='formbutton button' type='submit' value='Search'/>\r\n                        </div>\r\n                    </form>  \r\n                </section>\r\n                <div className='resultsSection'>\r\n                    {this.state.thinking || this.state.cards.length !== 0 ? <span>Results</span>: <span></span>}\r\n                </div>\r\n                {this.state.thinking && this.state.cards.length === 0 ? this.renderThinking() : <span></span>}\r\n                <br/>\r\n                <div className='cardsDisplay'>\r\n                    {this.state.cards.length !== 0? cardResults: <span></span>}\r\n                </div>\r\n                {this.state.thinking ? this.renderThinking() : <span></span>}\r\n                {this.state.cards.length === 0 ?<div/>: this.moreButon()}\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport DeckApiService from '../../services/deck-api-service';\r\nimport UserContext from '../../context/user-context';\r\nimport config from '../../../src/config';\r\nimport './AllDecks.css';\r\n\r\nexport default class AllDecks extends Component {\r\n    static contextType = UserContext;\r\n   constructor(props){\r\n       super(props)\r\n       this.state ={\r\n        decks: [],\r\n        newDeckName: '',\r\n    }\r\n    this.clearDeckName = this.clearDeckName.bind(this)\r\n   }\r\n   \r\n   \r\n    deleteDeck = (event, deck) => {\r\n        event.preventDefault()\r\n        DeckApiService.deleteDeck(deck)\r\n        let lessDecks = this.context.decks.filter(d => d.deck_id !== deck)\r\n        this.context.updateDecks(lessDecks)\r\n        this.setState({decks: lessDecks})\r\n    };\r\n\r\n    renderDecks() {\r\n        const {decks = []} = this.context\r\n        return decks.map(deck =>\r\n            <div className='deck' key={deck.deck_id}>\r\n                    <Link className='deckLink' to={`/deck/${deck.deck_id}`}>{deck.deck_name}</Link>\r\n                    <div className='deckButtons'>\r\n                        <Link to='/SearchCards'><button className='button addcards'>Add Cards</button></Link>\r\n                        <button className='button deletedeck' onClick={e => this.deleteDeck(e, deck.deck_id)}>Delete deck</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n    };\r\n\r\n    clearDeckName = () => {\r\n        this.setState({\r\n            newDeckName: '',\r\n           \r\n        })\r\n    };\r\n\r\n    setNewDecks = (deck) => {\r\n        this.context.addDeck(deck)\r\n        this.setState({decks: this.context.decks})\r\n        window.sessionStorage.setItem(config.DECKS, this.context.decks)\r\n    };\r\n\r\n    addNewDeck = (event) => {\r\n        event.preventDefault()\r\n        DeckApiService.postDeck(this.context.user_id, this.state.newDeckName)\r\n        .then(deck => this.setNewDecks(deck))\r\n        this.clearDeckName()\r\n        };\r\n\r\n    render(){\r\n        const handleChange=(event)=>{\r\n            this.setState({\r\n                newDeckName:event.target.value\r\n            })\r\n        }\r\n        if(!sessionStorage.user_id){\r\n            return (<div>\r\n                <h4>Oops you arn't logged in!</h4>\r\n                <Link \r\n                    className='homeLink'\r\n                    to='/'>\r\n                    Home Page\r\n                </Link>\r\n                </div>)\r\n        }\r\n        return(\r\n            <>\r\n            <h3>My Decks</h3>\r\n            <div className='listOfDecks'>\r\n                {this.renderDecks()}\r\n                <br/>\r\n            </div>\r\n                <form onSubmit={this.addNewDeck}>\r\n                    <legend>Start a new deck</legend>\r\n                    <label>Deck Name: </label>\r\n                    <input type='text' name='deck_name' value={this.state.newDeckName} onChange={handleChange}></input>\r\n                    <input type='submit' className='button go' value='Go'/>\r\n                </form>\r\n                \r\n            </>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport SingleDeckApiService from '../../services/Single-deck-api-service';\r\nimport UserContext from '../../context/user-context';\r\nimport { Link } from 'react-router-dom';\r\nimport './SingleDeckView.css';\r\n\r\nexport default class SingleDeckView extends Component {\r\n    static contextType = UserContext;\r\n    static defaultProps ={\r\n        match: { params: {}},\r\n    };\r\n\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state ={\r\n            deckList: [],\r\n            deck_id: null,\r\n            deckName: '',\r\n            Creature: [],\r\n            Sorcery: [],\r\n            Instant: [],\r\n            Enchantment: [],\r\n            Land: [],\r\n            Planeswalker: [],\r\n            Artifact: [],\r\n            listview: 'Card View',\r\n            imageModalView: 'hidemodal'\r\n        }\r\n    };\r\n\r\n    closeUp = () => {\r\n        //this.setState({ imageModalView: 'showmodal'});\r\n    };\r\n\r\n    removeImageCloseUp = () => {\r\n        //this.setState({ imageModalView: 'hidemodal'});\r\n    };\r\n\r\n    countType(currenttype){\r\n        let obj = {};\r\n        let typeFilteredList = this.state.deckList.filter(card =>{ \r\n            if(card.type.search(currenttype) >= 0){\r\n                return card\r\n            }\r\n            return '';\r\n        });\r\n        let consolidated = [];\r\n        typeFilteredList.forEach(card => {\r\n            if(consolidated.find(j => j.card_name === card.card_name)){\r\n                let index = consolidated.findIndex(j => j.card_name === card.card_name)\r\n                consolidated[index].count++\r\n            } else {\r\n                consolidated.push({...card, count: 1})\r\n            } \r\n        }, Object.create(null));\r\n        if(typeFilteredList.length !== 0){\r\n            let name = currenttype\r\n            obj[name] = consolidated\r\n            this.setState(obj)\r\n        };\r\n    };\r\n\r\n    sortByType=()=> {\r\n        let types = ['Creature', 'Sorcery', 'Instant', 'Enchantment', 'Land', 'Planeswalker', 'Artifact'];\r\n        types.map(currentType => {\r\n            this.countType(currentType);\r\n            return 'return';\r\n        })\r\n    };\r\n\r\n    listCardView =()=>{\r\n        if(this.state.listview === 'Card View'){\r\n            this.setState({listview: 'List View'})\r\n        } else {\r\n            this.setState({listview: 'Card View'})\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        if(sessionStorage.user_id){\r\n        const {deckId} = this.props.match.params\r\n        let deckName = this.context.decks.find(deck => deck.deck_id === Number(deckId))\r\n        this.setState({ \r\n            deck_id: deckId,\r\n            deckName: deckName.deck_name,\r\n        })\r\n        SingleDeckApiService.getDeckList(deckId)\r\n            .then(cards => {this.setState({\r\n                deckList: cards,\r\n            });\r\n            this.sortByType()\r\n            }\r\n            )\r\n        }\r\n    };\r\n\r\n    deleteCard(e, id){\r\n        e.preventDefault()\r\n        SingleDeckApiService.deleteCard(id)\r\n        let lessCards = this.state.deckList.filter(c => c.card_id !== id)\r\n        this.setState({\r\n            deckList: lessCards\r\n        })\r\n    };\r\n\r\n    totalCards(cardlist){\r\n        let total = 0;\r\n        for(let i=0; i<cardlist.length; i++){\r\n            total= total + cardlist[i].count\r\n        }\r\n        return total\r\n    }\r\n\r\n    render() {\r\n        if(!sessionStorage.user_id){\r\n            return (\r\n                <div>\r\n                    <h4>Oops you arn't logged in!</h4>\r\n                    <Link \r\n                    className='homeLink'\r\n                    to='/'>\r\n                        Home Page\r\n                    </Link>\r\n                </div>)\r\n        };\r\n        const types = [{name: 'Creature', state: this.state.Creature}, \r\n        {name: 'Sorcery', state: this.state.Sorcery}, \r\n        {name: 'Instant', state: this.state.Instant}, \r\n        {name: 'Enchantment', state: this.state.Enchantment}, \r\n        {name: 'Land', state: this.state.Land}, \r\n        {name: 'Planeswalker', state: this.state.Planeswalker},\r\n        {name: 'Artifact', state: this.state.Artifact}]\r\n\r\n        function closeUpGenerator (card) {\r\n            console.log(card)\r\n            /*if(card.layout === 'transform'){\r\n            return (<div>\r\n                <img className=\"modal-content\" alt={card.name} src={card.card_faces[0].image_uris.border_crop}/>\r\n                <img className=\"modal-content\" alt={card.name} src={card.card_faces[1].image_uris.border_crop}/>\r\n            </div>)\r\n            } else {\r\n                return <img className=\"modal-content\" alt={card.name} src={card.image_uris.border_crop}/>;\r\n            }*/\r\n        };\r\n        return(\r\n            <section>\r\n                <h2 className='deckName'>{this.state.deckName}</h2>\r\n                <div className='deckDetails'>\r\n                    <div className='tally'>Total: {this.state.deckList.length} </div>\r\n                    <div className='tally'>Creatures: {this.state.Creature.length} </div>\r\n                    <div className='tally'>Instants: {this.state.Instant.length} </div>\r\n                    <div className='tally'>Enchantments: {this.state.Enchantment.length}</div>\r\n                    <div className='tally'>Sorceries: {this.state.Sorcery.length}</div>\r\n                    <div className='tally'>Lands: {this.state.Land.length}</div>\r\n                    <div className='tally'>Planeswalkers: {this.state.Planeswalker.length}</div>\r\n                </div>\r\n                <button type='button' className='listview button' onClick={this.listCardView}>{this.state.listview}</button>\r\n                <br/>\r\n\r\n                {this.state.listview === 'Card View'\r\n                ?\r\n                <div className='cardsListDisplay'>\r\n                    {types.map(type => {\r\n                        return (\r\n                            <div className='typedisplay' key={type.name}>\r\n                            <h4>{type.name} X {this.totalCards(type.state)}</h4>\r\n                                {type.state.map(card => {\r\n                                    if(card.count > 1){\r\n                                    return <p className='viewCard' onClick={this.closeUp} key={card.card_id}>{card.card_name} X {card.count}</p>}\r\n                                    else { return <p className='viewCard'  onClick={this.closeUp} key={card.card_id}>{card.card_name}</p>}\r\n                                    })}\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n                : \r\n                <div className='cardsDisplay'>\r\n                    {this.state.deckList.map(card => \r\n                        <div className='card' key={card.card_id}>\r\n                            <p className='cardName'>{card.card_name}</p>\r\n                            <img alt={card.card_name} src={card.image_url}/>\r\n                            <br/>\r\n                            <button onClick={e => this.deleteCard(e, card.card_id)}>remove</button>\r\n                        </div>\r\n                    )}\r\n                </div> \r\n                }\r\n\r\n                <div id=\"imageModal\" className={this.state.imageModalView}>\r\n                    <span className=\"close\" onClick={this.removeImageCloseUp}>&#x02717;</span>\r\n                    {closeUpGenerator(this.state)}\r\n                </div>\r\n\r\n            <Link to='/SearchCards'><button className='button'>Add Cards</button></Link>\r\n            </section>\r\n        )\r\n    }\r\n};\r\n\r\n/* */","import React, { Component } from 'react';\r\nimport UserContext from './user-context';\r\nimport config from '../config';\r\n\r\n\r\nclass UserProvider extends Component {\r\n    state ={\r\n        user_id: window.sessionStorage.user_id,\r\n        decks: JSON.parse(sessionStorage.getItem('decks')),\r\n\r\n        updateDecks: (decks) => {\r\n            let stringDecks = JSON.stringify(decks)\r\n            window.sessionStorage.setItem(config.DECKS, stringDecks)\r\n            this.setState({\r\n                user_id: window.sessionStorage.user_id,\r\n                decks: JSON.parse(window.sessionStorage.decks),\r\n            }\r\n            )\r\n            return 'done'\r\n        },\r\n        \r\n        addDeck: (deck) => {\r\n            let moreDecks = this.state.decks.push(deck)\r\n            let stringDecks= JSON.stringify(moreDecks)\r\n            window.sessionStorage.setItem(config.DECKS, stringDecks)\r\n        },\r\n        clearId: () =>\r\n            this.setState({\r\n                user_id: null,\r\n               \r\n            })\r\n    };\r\n    \r\n    render() {\r\n        return(\r\n            <UserContext.Provider value={this.state}>\r\n                {this.props.children}\r\n            </UserContext.Provider>\r\n        )\r\n    }\r\n};\r\n\r\nexport default UserProvider;","import React from 'react';\r\nimport Header from './components/Header/Header';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport LandingPage from './components/LandingPage/LandingPage';\r\nimport LoginPage from './components/LoginPage/LoginPage';\r\nimport RegisterPage from './components/RegisterPage/RegisterPage';\r\nimport SearchCards from './components/SearchCards/SearchCards';\r\nimport AllDecks from './components/AllDecks/AllDecks';\r\nimport SingleDeckView from './components/SingleDeckView/SingleDeckView';\r\nimport UserProvider from './context/user-provider';\r\n\r\nfunction App() {\r\n  return (\r\n  <UserProvider>\r\n    <header>\r\n      <Header />\r\n    </header>\r\n    <main className='App'>\r\n      <Switch>\r\n        <Route exact path={'/'} component={LandingPage}/>\r\n        <Route path={'/LoginPage'} component={LoginPage} />\r\n        <Route path={'/RegisterPage'} component={RegisterPage}/>\r\n        <Route path={'/SearchCards'} component={SearchCards}/>\r\n        <Route path={'/MyDecks'} component={AllDecks}/>\r\n        <Route path={'/deck/:deckId'} component={SingleDeckView}/>\r\n      </Switch>\r\n    </main>\r\n    </UserProvider>\r\n  );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n<BrowserRouter>\r\n<App />\r\n</BrowserRouter>, \r\ndocument.getElementById('root'));"],"sourceRoot":""}